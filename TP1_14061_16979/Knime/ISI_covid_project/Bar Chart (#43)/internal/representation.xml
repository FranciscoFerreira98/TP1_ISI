<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="viewRepresentation">
<entry key="jsNamespace" type="xstring" value="knimeGroupedBarChart"/>
<config key="jsCode">
<entry key="array-size" type="xint" value="1"/>
<entry key="0" type="xstring" value="/* global d3:false, kt:false, nv:false */%%00010window.knimeGroupedBarChart = (function () {%%00010%%00010    var barChart = {};%%00010    var MIN_HEIGHT = 100;%%00010    var MIN_WIDTH = 100;%%00010    var layoutContainer,%%00010        _representation,%%00010        _value,%%00010        chart,%%00010        svg,%%00010        knimeTable,%%00010        plotData,%%00010        wrappedPlotData,%%00010        colorRange,%%00010        categories,%%00010        freqCols,%%00010        _translator,%%00010        _keyNameMap,%%00010        _incomingTable,%%00010%%00010        /**%%00010         * 2d-array where for each category (indexing follows categories array) we%%00010         * store an array of those frequency columns, which have a missing value in%%00010         * the current category. This allows to exclude specific bars or even the%%00010         * whole category. Storing by category helps to group warnings also by%%00010         * category. Required for missing values handling.%%00010         */%%00010        missValInCat,%%00010%%00010        /**%%00010         * Array where for each frequency column, which has in all other categories%%00010         * only missing values, we store whether it has a value in the Missing%%00010         * values category. This allows to decide, if we should keep this freq%%00010         * column (if it has a value in MissValCat and the option &quot;include%%00010         * MissValCat&quot; is on) or exclude it. Each item has the fields: col - name of%%00010         * freq column hasValueOnMissValCat - whether the column has a non-missing%%00010         * value in the Missing values category (true/false) Required for missing%%00010         * values handling.%%00010         */%%00010        freqColValueOnMissValCat,%%00010%%00010        /**%%00010         * Array where for each frequency column, which has non-missing value in the%%00010         * Missing values category, we store this value. We need to store it%%00010         * separately to quickly add/remove them to the plot data, when the option%%00010         * &quot;include MissValCat&quot; is getting switched. Each item has the fields: col -%%00010         * name of freq column value - non-missing value, this freq column has in%%00010         * the Missing values category Required for missing values handling.%%00010         */%%00010        missValCatValues,%%00010%%00010        /**%%00010         * Boolean flag - is the Missing values category present in the dataset.%%00010         * Required for missing values handling.%%00010         */%%00010        isMissValCat,%%00010%%00010        /**%%00010         * Map where keys - frequency column names, values - array of those%%00010         * categories for which the bar, specified by the corresponding freq column%%00010         * and the category, was excluded from the view. There excluded bars%%00010         * actually specify those dummy null values, we have to add to the stacked%%00010         * chart to fix it. Choosing freq cols as keys helps adding dummy nulls%%00010         * since the plot dataset has to be key-&gt;values. Required for missing values%%00010         * handling.%%00010         */%%00010        excludeFreqColCatMap,%%00010        showWarnings,%%00010%%00010        /**%%00010         * Function declarations%%00010         */%%00010        drawChart, drawControls, fixStackedData, createHilightBar, removeHilightBar, getClusterToRowMapping,%%00010        subscribeToSelection, publishSelection, processData, getRoundedMaxValue, getSelectedRowIDs,%%00010        handleHighlightClick, sortByClusterName, setCssClasses, setTooltipCssClasses, updateTitles, updateAxisLabels,%%00010        updateLabels, updateChartType, redrawSelection, onSelectionChanged, registerClickHandler, getActiveBars,%%00010        checkClearSelectionButton, selectCorrectBar, processMissingValues, checkMaxSizeXAxis, KeyNameMap,%%00010        handleWarnings, handleMissingValues, getStackedMaxValue;%%00010%%00010    var MISSING_VALUES_LABEL = 'Missing values';%%00010    var MISSING_VALUES_ONLY = 'missingValuesOnly';%%00010    var FREQ_COLUMN_MISSING_VALUES_ONLY = 'freqColumnMissingValuesOnly';%%00010    var CATEGORY_MISSING_VALUES_ONLY = 'categoryMissingValuesOnly';%%00010    var NO_DATA_AVAILABLE = 'noDataAvailable';%%00010%%00010    barChart.init = function (representation, value) {%%00010        _value = value;%%00010        _representation = representation;%%00010        _incomingTable = _representation.inObjects[0].table;%%00010%%00010        if (_representation.options.enableSelection &amp;&amp; _representation.inObjects[0].translator) {%%00010            _translator = _representation.inObjects[0].translator;%%00010            _translator.sourceID = _representation.inObjects[0].uuid;%%00010            _translator.targetIDs = [_representation.tableIds[0]];%%00010            knimeService.registerSelectionTranslator(_translator, _translator.sourceID);%%00010            subscribeToSelection(_value.options.subscribeToSelection);%%00010        }%%00010%%00010        showWarnings = _representation.options.showWarnings;%%00010%%00010        if (_representation.warnMessage &amp;&amp; showWarnings) {%%00010            knimeService.setWarningMessage(_representation.warnMessage);%%00010        }%%00010        if (_representation.options.enableViewControls) {%%00010            drawControls();%%00010        }%%00010        drawChart();%%00010%%00010        _keyNameMap = new KeyNameMap(getClusterToRowMapping());%%00010    };%%00010%%00010%%00010    drawChart = function (redraw) {%%00010%%00010        d3.select('html').style('width', '100%').style('height', '100%');%%00010        d3.select('body').style('width', '100%').style('height', '100%');%%00010%%00010        // Process options%%00010        var optWidth = _representation.options.svg.width;%%00010        var optHeight = _representation.options.svg.height;%%00010%%00010        var optTitle = _value.options.title;%%00010        var optSubtitle = _value.options.subtitle;%%00010%%00010        var sortLabels = _representation.options.sort;%%00010        var optLegend = _representation.options.legend;%%00010        var optTooltips = _representation.options.tooltip;%%00010%%00010        var optOrientation = _value.options.orientation;%%00010%%00010        var optFullscreen = _representation.options.svg.fullscreen &amp;&amp; _representation.runningInView;%%00010        var optEnableSelection = _representation.options.enableSelection;%%00010%%00010        var isTitle = optTitle || optSubtitle;%%00010%%00010        var body = d3.select('body');%%00010%%00010        var width = optWidth + 'px';%%00010        var height = optHeight + 'px';%%00010        if (optFullscreen) {%%00010            knimeService.floatingHeader(isTitle);%%00010            width = '100%';%%00010            height = isTitle ? '100%' : 'calc(100% - ' + knimeService.headerHeight() + 'px)';%%00010        }%%00010%%00010        var div;%%00010        if (redraw) {%%00010            d3.select('svg').remove();%%00010            div = d3.select('#svgContainer');%%00010        } else {%%00010            layoutContainer = body.append('div')%%00010                .attr('id', 'layoutContainer')%%00010                .attr('class', 'knime-layout-container')%%00010                .style('width', width)%%00010                .style('height', height)%%00010                .style('min-width', MIN_WIDTH + 'px')%%00010                .style('min-height', MIN_HEIGHT + 'px');%%00010%%00010            div = layoutContainer.append('div')%%00010                .attr('id', 'svgContainer')%%00010                .attr('class', 'knime-svg-container')%%00010                .style('min-width', MIN_WIDTH + 'px')%%00010                .style('min-height', MIN_HEIGHT + 'px');%%00010        }%%00010%%00010        var svg1 = document.createElementNS('http://www.w3.org/2000/svg', 'svg');%%00010        div[0][0].appendChild(svg1);%%00010%%00010        svg = d3.select('svg')%%00010            .style('display', 'block')%%00010            .classed('colored', true);%%00010%%00010%%00010        // handle clicks on background to deselect current selection%%00010        if (optEnableSelection) {%%00010            svg.on('click', function () {%%00010                removeHilightBar('', true);%%00010                _value.options.selection = [];%%00010                publishSelection(true);%%00010            });%%00010        }%%00010%%00010%%00010        if (optFullscreen) {%%00010            // Set full screen height/width%%00010            div.style('width', '100%');%%00010            div.style('height', height /* this should be 100% always, but for some reason that doesn't work */);%%00010%%00010            svg.attr('width', '100%');%%00010            svg.attr('height', '100%');%%00010        } else {%%00010            if (optWidth &gt; 0) {%%00010                div.style('width', optWidth + 'px');%%00010                svg.attr('width', optWidth);%%00010                // Looks like the below doesn't work,%%00010                // above does work...%%00010                // chart.width(optWidth);%%00010            }%%00010            if (optHeight &gt; 0) {%%00010                svg.attr('height', optHeight);%%00010                div.style('height', optHeight + 'px');%%00010                // Looks like the below doesn't work,%%00010                // above does work...%%00010                // chart.height(optHeight);%%00010            }%%00010        }%%00010%%00010        if (!redraw) {%%00010            /*%%00010             * Process data%%00010             */%%00010            knimeTable = new kt();%%00010            // Add the data from the input port to the knimeTable.%%00010            var port0dataTable = _representation.inObjects[0].table;%%00010            if (!_representation.isHistogram &amp;&amp; sortLabels) {%%00010                port0dataTable.rows = sortByClusterName(port0dataTable.rows);%%00010            }%%00010            knimeTable.setDataTable(port0dataTable);%%00010%%00010            processData();%%00010        }%%00010%%00010        /*%%00010         * Plot chart%%00010         */%%00010        nv.addGraph(function () {%%00010            if (optOrientation) {%%00010                chart = nv.models.multiBarHorizontalChart();%%00010            } else {%%00010                chart = nv.models.multiBarChart();%%00010                chart.reduceXTicks(Boolean(_representation.isHistogram));%%00010                /* if (_representation.options.rotateLabels) {%%00010                    chart.rotateLabels(_representation.options.rotateLabels);%%00010                } */%%00010            }%%00010%%00010            chart.dispatch.on('renderEnd.css', function () {%%00010                setCssClasses();%%00010            });%%00010            // tooltip is re-created every time therefore we need to assign%%00010            // classes accordingly%%00010            chart.multibar.dispatch.on('elementMouseover.tooltipCss', setTooltipCssClasses);%%00010            chart.multibar.dispatch.on('elementMousemove.tooltipCss', setTooltipCssClasses);%%00010            chart.legend.dispatch.on('legendClick', function () {%%00010                drawChart(true);%%00010                d3.event.stopPropagation();%%00010            });%%00010%%00010            var stacked = _value.options.chartType === 'Stacked';%%00010            if (stacked) {%%00010                fixStackedData(true); // add dummy nulls%%00010            }%%00010            chart.stacked(stacked);%%00010%%00010            chart%%00010                .color(colorRange)%%00010                .duration(0)%%00010                .margin({ right: 20 })%%00010                .groupSpacing(_representation.isHistogram ? 0.01 : 0.1);%%00010%%00010            updateTitles(false);%%00010%%00010            chart.showControls(false); // all the controls moved to settings menu%%00010            chart.showLegend(optLegend);%%00010            chart.tooltip.enabled(typeof optTooltips === 'undefined' || optTooltips);%%00010%%00010            updateAxisLabels(false);%%00010            svg.datum(plotData).transition().duration(0).call(chart);%%00010            nv.utils.windowResize(function () {%%00010                updateAxisLabels(true);%%00010                updateLabels();%%00010                setCssClasses();%%00010                removeHilightBar('', true);%%00010                redrawSelection();%%00010            });%%00010%%00010            // redraws selection%%00010            if (_value.options.selection) {%%00010                redrawSelection();%%00010            }%%00010            return chart;%%00010        });%%00010    };%%00010%%00010    sortByClusterName = function (array) {%%00010        return array.sort(function (a, b) {%%00010            var x = a.data[0];%%00010            var y = b.data[0];%%00010%%00010            // Make sure, that missing values are displayed last%%00010            if (x === null) {%%00010                return 1;%%00010            } else if (y === null) {%%00010                return -1;%%00010            }%%00010%%00010            if (typeof x === 'string') {%%00010                x = (String(x)).toLowerCase();%%00010            }%%00010            if (typeof y === 'string') {%%00010                y = (String(y)).toLowerCase();%%00010            }%%00010            var compare = 0;%%00010            if (x &lt; y) {%%00010                compare = -1;%%00010            } else if (x &gt; y) {%%00010                compare = 1;%%00010            }%%00010            return compare;%%00010        });%%00010    };%%00010%%00010    registerClickHandler = function () {%%00010        d3.selectAll('.nv-bar').on('click', function (event) {%%00010            handleHighlightClick(event);%%00010            d3.event.stopPropagation();%%00010        });%%00010    };%%00010%%00010    getActiveBars = function () {%%00010        var stacked = _value.options.chartType;%%00010        var counter = 0;%%00010        if (stacked === 'Stacked') {%%00010            counter = 1;%%00010        } else {%%00010            for (var j = 0; j &lt; plotData.length; j++) {%%00010                if (plotData[j].disabled !== true) {%%00010                    counter++;%%00010                }%%00010            }%%00010        }%%00010        return counter;%%00010    };%%00010%%00010    redrawSelection = function () {%%00010        var length = _value.options.selection ? _value.options.selection.length : 0;%%00010        for (var i = 0; i &lt; length; i++) {%%00010            createHilightBar(_keyNameMap.getNameFromKey(_value.options.selection[i][0]),%%00010                _value.options.selection[i][1]);%%00010        }%%00010    };%%00010%%00010    subscribeToSelection = function (subscribeBool) {%%00010        if (_representation.options.enableSelection) {%%00010            if (subscribeBool) {%%00010                knimeService.subscribeToSelection(_translator.sourceID, onSelectionChanged);%%00010            } else {%%00010                knimeService.unsubscribeSelection(_translator.sourceID, onSelectionChanged);%%00010            }%%00010        }%%00010    };%%00010%%00010    publishSelection = function (shouldPublish) {%%00010        if (shouldPublish) {%%00010            knimeService.setSelectedRows(_translator.sourceID, getSelectedRowIDs(), onSelectionChanged);%%00010        }%%00010    };%%00010%%00010    checkClearSelectionButton = function () {%%00010        if (_value.options.selection) {%%00010            var button = d3.select('#clearSelectionButton');%%00010            if (button) {%%00010                button.classed('inactive', function () {%%00010                    return !_value.options.selection.length &gt; 0;%%00010                });%%00010            }%%00010        }%%00010    };%%00010%%00010    getSelectedRowIDs = function () {%%00010        if (_value.options.selection) {%%00010            var selectedRowIDs = [];%%00010            for (var i = 0; i &lt; _value.options.selection.length; i++) {%%00010                selectedRowIDs.push(_value.options.selection[i][0]);%%00010            }%%00010            return selectedRowIDs;%%00010        } else {%%00010            return [];%%00010        }%%00010    };%%00010%%00010    selectCorrectBar = function (clusterName) {%%00010        var allBars = d3.selectAll('.knime-x text.knime-tick-label');%%00010        for (var j = 0; j &lt; allBars[0].length; j++) {%%00010            if (d3.select(allBars[0][j]).data()[0] === clusterName) {%%00010                return d3.select(allBars[0][j]);%%00010            }%%00010        }%%00010        // no bar found%%00010        return null;%%00010    };%%00010%%00010    // Removes the clusterName with the given cluster name. If &quot;removeAll&quot; is true all bars are removed%%00010    removeHilightBar = function (clusterName, removeAll) {%%00010        if (_value.options.selection) {%%00010            var selectedEntry, barParent;%%00010            if (removeAll) {%%00010                var length = _value.options.selection.length;%%00010                for (var i = 0; i &lt; length; i++) {%%00010                    selectedEntry = _value.options.selection[i];%%00010                    var bars = d3.selectAll('.hilightBar');%%00010                    barParent = bars.select(function () {%%00010                        return this.parentNode;%%00010                    });%%00010                    barParent.select('text').classed(selectedEntry[1], false);%%00010                    d3.selectAll('.hilightBar').remove();%%00010                }%%00010            } else {%%00010                var barIndex = getSelectedRowIDs().indexOf(_keyNameMap.getKeyFromName(clusterName));%%00010                if (barIndex &gt; -1) {%%00010                    selectedEntry = _value.options.selection[barIndex];%%00010                    var bar = selectCorrectBar(clusterName);%%00010                    if (bar) {%%00010                        barParent = bar.select(function () {%%00010                            return this.parentNode;%%00010                        });%%00010                        barParent.select('text').classed(selectedEntry[1], false);%%00010                        barParent.selectAll('.hilightBar').remove();%%00010                    }%%00010                }%%00010            }%%00010        }%%00010    };%%00010%%00010    // Create a hilight-bar above the cluster with the given name and assigns the given css class to it%%00010    createHilightBar = function (clusterName, selectionClass) {%%00010        var optOrientation = _value.options.orientation;%%00010        var overallBarCount = -1;%%00010        for (var k = 0; k &lt; plotData.length; k++) {%%00010            for (var j = 0; j &lt; plotData[k].values.length; j++) {%%00010                overallBarCount++;%%00010                if (plotData[k].values[j].x === clusterName) {%%00010                    d3.selectAll('.knime-x text').each(function (d, i) {%%00010                        if (i === overallBarCount) {%%00010                            d3.select(this).classed(selectionClass, true);%%00010                            var selectionTitle;%%00010                            if (selectionClass === 'knime-selected') {%%00010                                selectionTitle = 'Selected';%%00010                            } else {%%00010                                selectionTitle = 'Partially selected';%%00010                            }%%00010                            var posX = 0;%%00010                            var posY = 0;%%00010                            var highlightHeight = 0;%%00010                            var highlightWidth = 5;%%00010                            var highlightBarBBox = d3.select('.nv-bar.positive').node().getBBox();%%00010                            var spaceBetweenBarAndChart = -7;%%00010                            if (optOrientation) {%%00010                                posY = -0.5 * (highlightBarBBox.height * getActiveBars());%%00010                                posX = spaceBetweenBarAndChart;%%00010                                highlightHeight = highlightBarBBox.height *%%00010                                    getActiveBars();%%00010                            } else {%%00010                                posX = -0.5 * (highlightBarBBox.width * getActiveBars());%%00010                                highlightWidth = highlightBarBBox.width * getActiveBars();%%00010                                highlightHeight = 5;%%00010                                posY = -spaceBetweenBarAndChart - highlightHeight;%%00010                            }%%00010                            d3.select(this.parentNode).append('rect').classed('hilightBar', true)%%00010                                .classed(selectionClass, true)%%00010                                .attr({ x: posX, y: posY, width: highlightWidth, height: highlightHeight })%%00010                                .style('pointer-events', 'all')%%00010                                .append('title')%%00010                                .classed('knime-tooltip', true)%%00010                                .text(selectionTitle);%%00010                        }%%00010                    });%%00010                    j = plotData[k].values.length;%%00010                    k = plotData.length - 1;%%00010                }%%00010            }%%00010        }%%00010    };%%00010%%00010    getClusterToRowMapping = function () {%%00010        var map = {};%%00010        for (var i = 0; i &lt; _incomingTable.rows.length; i++) {%%00010            if (_incomingTable.rows[i].data[0]) {%%00010                map[_incomingTable.rows[i].data[0]] = _incomingTable.rows[i].rowKey;%%00010            } else {%%00010                map['Missing values'] = _incomingTable.rows[i].rowKey;%%00010            }%%00010        }%%00010        return map;%%00010    };%%00010%%00010    // Helper class to handle conversion from cluster name to row key%%00010    KeyNameMap = function (map) {%%00010        this.map = map;%%00010        this.reverseMap = {};%%00010        for (var key in map) {%%00010            var value = map[key];%%00010            this.reverseMap[value] = key;%%00010        }%%00010    };%%00010%%00010    KeyNameMap.prototype.getKeyFromName = function (name) {%%00010        return this.map[name];%%00010    };%%00010    KeyNameMap.prototype.getNameFromKey = function (key) {%%00010        return this.reverseMap[key];%%00010    };%%00010%%00010    handleHighlightClick = function (event) {%%00010        if (!_value.options.selection) {%%00010            _value.options.selection = [];%%00010        }%%00010        var clusterName = event.x;%%00010        var clusterKey = _keyNameMap.getKeyFromName(clusterName);%%00010        var barIndex = getSelectedRowIDs().indexOf(clusterKey);%%00010        // Deselect already selected bar when clicking again on it%%00010        if (barIndex &gt; -1 &amp;&amp; (d3.event.ctrlKey || d3.event.shiftKey || d3.event.metaKey)) {%%00010            if (_representation.options.enableSelection) {%%00010                if (_value.options.publishSelection) {%%00010                    knimeService.removeRowsFromSelection(_translator.sourceID, [clusterKey], _translator.sourceID);%%00010                }%%00010            }%%00010            removeHilightBar(clusterName, false);%%00010            _value.options.selection.splice(barIndex, 1);%%00010        } else if (!d3.event.ctrlKey &amp;&amp; !d3.event.shiftKey &amp;&amp; !d3.event.metaKey) {%%00010            // Deselect all previously selected bars and select the newly clicked one%%00010            if (_representation.options.enableSelection) {%%00010                if (_value.options.publishSelection) {%%00010                    knimeService.setSelectedRows(_translator.sourceID, [clusterKey], _translator.sourceID);%%00010                }%%00010            }%%00010            removeHilightBar(clusterName, true);%%00010            createHilightBar(clusterName, 'knime-selected');%%00010            _value.options.selection = [];%%00010            _value.options.selection.push([clusterKey, 'knime-selected']);%%00010        } else {%%00010            // Select the clicked bar, as it is either a new selection or a additional selection%%00010            if (_representation.options.enableSelection) {%%00010                if (_value.options.publishSelection) {%%00010                    knimeService.addRowsToSelection(_translator.sourceID, [clusterKey], _translator.sourceID);%%00010                }%%00010            }%%00010            createHilightBar(clusterName, 'knime-selected');%%00010            _value.options.selection.push([clusterKey, 'knime-selected']);%%00010        }%%00010        checkClearSelectionButton();%%00010    };%%00010%%00010    onSelectionChanged = function (data) {%%00010        if (!_value.options.selection) {%%00010            _value.options.selection = [];%%00010        }%%00010        if (data.reevaluate) {%%00010            removeHilightBar('', true);%%00010            var selectedRows = knimeService.getAllRowsForSelection(_translator.sourceID);%%00010            var partiallySelectedRows = knimeService.getAllPartiallySelectedRows(_translator.sourceID);%%00010            var length, selectedRow, partiallySelectedRow;%%00010            for (selectedRow in selectedRows) {%%00010                length = _value.options.selection.length;%%00010                _value.options.selection[length] = [selectedRows[selectedRow], 'knime-selected'];%%00010                createHilightBar(_keyNameMap.getNameFromKey(selectedRows[selectedRow]), 'knime-selected');%%00010            }%%00010            for (partiallySelectedRow in partiallySelectedRows) {%%00010                length = _value.options.selection.length;%%00010                _value.options.selection[length] = [partiallySelectedRows[partiallySelectedRow],%%00010                    'knime-partially-selected'];%%00010                createHilightBar(_keyNameMap.getNameFromKey(partiallySelectedRows[partiallySelectedRow]),%%00010                    'knime-partially-selected');%%00010            }%%00010        } else if (data.changeSet) {%%00010            if (data.changeSet.removed) {%%00010                data.changeSet.removed.forEach(function (rowId) {%%00010                    var clusterName = rowId;%%00010                    var index = getSelectedRowIDs().indexOf(clusterName);%%00010                    if (index &gt; -1) {%%00010                        removeHilightBar(_keyNameMap.getNameFromKey(rowId), false);%%00010                        _value.options.selection.splice(index, 1);%%00010                    }%%00010                });%%00010            }%%00010            if (data.changeSet.partialRemoved) {%%00010                data.changeSet.partialRemoved.forEach(function (rowId) {%%00010                    var clusterName = rowId;%%00010                    var index = getSelectedRowIDs().indexOf(clusterName);%%00010                    if (index &gt; -1) {%%00010                        removeHilightBar(_keyNameMap.getNameFromKey(rowId), false);%%00010                        _value.options.selection.splice(index, 1);%%00010                    }%%00010                });%%00010            }%%00010            if (data.changeSet.added) {%%00010                data.changeSet.added.forEach(function (rowId) {%%00010                    var index = getSelectedRowIDs().indexOf(rowId);%%00010                    if (index === -1) {%%00010                        _value.options.selection.push([rowId, 'knime-selected']);%%00010                        createHilightBar(_keyNameMap.getNameFromKey(rowId), 'knime-selected');%%00010                    }%%00010                });%%00010            }%%00010            if (data.changeSet.partialAdded) {%%00010                data.changeSet.partialAdded.forEach(function (rowId) {%%00010                    var index = getSelectedRowIDs().indexOf(rowId);%%00010                    if (index === -1) {%%00010                        _value.options.selection.push([rowId, 'knime-partially-selected']);%%00010                        createHilightBar(_keyNameMap.getNameFromKey(rowId), 'knime-partially-selected');%%00010                    }%%00010                });%%00010            }%%00010        }%%00010        checkClearSelectionButton();%%00010    };%%00010%%00010    // eslint-disable-next-line complexity%%00010    processData = function () {%%00010        var optMethod = _representation.options.aggr;%%00010        var optFreqCol = _representation.options.freq;%%00010        var optCat = _representation.options.cat;%%00010%%00010        var customColors, colorScale;%%00010        if (_representation.inObjects[1]) {%%00010            // Custom color scale%%00010            var colorTable = new kt();%%00010            colorTable.setDataTable(_representation.inObjects[1]);%%00010            if (colorTable.getColumnTypes()[0] === 'string') {%%00010                customColors = {};%%00010                var colorCol = colorTable.getColumn(0);%%00010                for (var color = 0; color &lt; colorCol.length; color++) {%%00010                    customColors[colorCol[color]] = colorTable.getRowColors()[color];%%00010                }%%00010                colorScale = [];%%00010            }%%00010        }%%00010%%00010        categories = knimeTable.getColumn(optCat);%%00010        var numCat = categories.length;%%00010%%00010        if (optMethod === 'Occurence\u00A0Count') {%%00010            optFreqCol = [knimeTable.getColumnNames()[1]];%%00010        }%%00010%%00010        // Get the frequency columns%%00010        var valCols = [];%%00010        freqCols = [];%%00010%%00010        for (var k = 0; k &lt; optFreqCol.length; k++) {%%00010            var valCol = knimeTable.getColumn(optFreqCol[k]);%%00010            valCols.push(valCol);%%00010            freqCols.push(optFreqCol[k]);%%00010        }%%00010%%00010        plotData = [];%%00010        freqColValueOnMissValCat = [];%%00010        missValInCat = new Array(numCat);%%00010        for (var category = 0; category &lt; numCat; category++) {%%00010            missValInCat[category] = [];%%00010        }%%00010        isMissValCat = false;%%00010        missValCatValues = [];%%00010        var numFreqColsNoMissVal = 0; // number of freq columns which have non-missing values (needed for color scale)%%00010        if (valCols.length &gt; 0) {%%00010            var numDataPoints = valCols[0].length;%%00010            for (var j = 0; j &lt; freqCols.length; j++) {%%00010%%00010                var col = freqCols[j];%%00010                if (optMethod === 'Occurence\u00A0Count' &amp;&amp; !_representation.isHistogram) {%%00010                    col = 'Occurrence Count';%%00010                }%%00010                var values = [];%%00010                var onlyMissValInCats = true; // whether the freq col has only%%00010                // missing values in%%00010                // non-&quot;Missing values&quot;%%00010                // categories%%00010                var hasValueOnMissValCat = false; // whether the freq col has%%00010                // a non-missing value in%%00010                // the Missing values%%00010                // category%%00010%%00010                for (var i = 0; i &lt; numDataPoints; i++) {%%00010                    if (typeof categories !== 'undefined') {%%00010                        var cat = categories[i];%%00010                        var val = valCols[j][i];%%00010%%00010                        if (cat === null) {%%00010                            // Missing values category%%00010                            isMissValCat = true;%%00010                            if (val !== null) {%%00010                                // save the non-missing value for the%%00010                                // corresponding freq col%%00010                                missValCatValues.push({%%00010                                    col: col,%%00010                                    value: val%%00010                                });%%00010                                // this freq col has non-missing value in the%%00010                                // Missing value category%%00010                                hasValueOnMissValCat = true;%%00010                            }%%00010                        } else if (val !== null) {%%00010                            // if both cat and value are not null - normal%%00010                            // case, just add the value%%00010                            onlyMissValInCats = false;%%00010                            values.push({%%00010                                x: cat,%%00010                                y: val%%00010                            });%%00010                        }%%00010%%00010                        if (val === null) {%%00010                            // this freq col has a missing value in the current%%00010                            // category - save this info%%00010                            missValInCat[i].push(col);%%00010                        }%%00010                    }%%00010                }%%00010%%00010                if (onlyMissValInCats) {%%00010                    // The freq col has only missing values in normal categories%%00010                    // -%%00010                    // we save whether it has a non-missing value in the Missing%%00010                    // values category.%%00010                    // Whether this column is going to be displayed in the view%%00010                    // depends on the &quot;includeMissValCat&quot; option.%%00010                    // So we don't add the column to the plot at this moment -%%00010                    // wait for processMissingValues()%%00010                    // Note: a non-missing value (if there is) is stored in%%00010                    // missValCatValues - hence, enough to store only a boolean%%00010                    // flag%%00010                    freqColValueOnMissValCat.push({%%00010                        col: col,%%00010                        hasValueOnMissValCat: hasValueOnMissValCat%%00010                    });%%00010                    if (hasValueOnMissValCat) {%%00010                        // If there is a non-missing value, then the presence of%%00010                        // the column depends on the &quot;includeMissValCat&quot; option,%%00010                        // which can be switched in the view on the fly.%%00010                        // We do not want this switch to influence on the color%%00010                        // scale, so we count it%%00010                        numFreqColsNoMissVal++;%%00010                    }%%00010                } else {%%00010                    // the freq col has non-missing values in normal categories%%00010                    // - add this column to the view%%00010                    var plotStream = {%%00010                        key: col,%%00010                        values: values%%00010                    };%%00010                    plotData.push(plotStream);%%00010%%00010                    if (customColors) {%%00010                        var customColor = customColors[col];%%00010                        if (!customColor) {%%00010                            customColor = '#7C7C7C';%%00010                        }%%00010                        colorScale.push(customColor);%%00010                    }%%00010                    numFreqColsNoMissVal++;%%00010                }%%00010            }%%00010        } else {%%00010            knimeService.setWarningMessage('No numeric values detected');%%00010            return;%%00010        }%%00010%%00010        if (customColors) {%%00010            colorRange = colorScale;%%00010        } else {%%00010            // Default color scale%%00010            if (numFreqColsNoMissVal &gt; 10) {%%00010                colorScale = d3.scale.category20();%%00010            } else {%%00010                colorScale = d3.scale.category10();%%00010            }%%00010            colorRange = colorScale.range();%%00010        }%%00010%%00010        processMissingValues();%%00010    };%%00010%%00010    /**%%00010     * @param {bool} switched - if the chart update was triggered by changing the &quot;include 'Missing values' category&quot;%%00010     * option in the view%%00010     * @returns {undefined}%%00010     */%%00010    processMissingValues = function (switched) {%%00010        // Make a list of freq columns to exclude%%00010        var excludeCols = []; // column names to exclude%%00010        // Go through the list of those freq cols which have only missing values%%00010        // in normal categories%%00010        // and exclude those which either 1) has a missing value in the Missing%%00010        // values category, or%%00010        // 2) has a non-missing value there but the option is set to Don't%%00010        // include missing values%%00010        for (var colI = 0; colI &lt; freqColValueOnMissValCat.length; colI++) {%%00010            var col = freqColValueOnMissValCat[colI];%%00010            if (!col.hasValueOnMissValCat || col.hasValueOnMissValCat &amp;&amp; !_value.options.includeMissValCat) {%%00010                excludeCols.push(col.col);%%00010            }%%00010        }%%00010%%00010        // Make a list of excluded bars per category or whole categories%%00010        var excludeBars = []; // bars (in string representation) to exclude%%00010        var excludeCats = []; // category names to exclude%%00010        var numLeftCols = freqCols.length - excludeCols.length; // how many%%00010        // columns left%%00010        // after%%00010        // excluded ones%%00010        var missValCatBars, // bars for Missing values category we add to the%%00010            data, dataInd;%%00010        // end, so we store them separately%%00010        var excludeWholeMissValCat = false;%%00010        excludeFreqColCatMap = {};%%00010        // We group the warnings by category, so we iterate over categories%%00010        for (var catI = 0; catI &lt; missValInCat.length; catI++) {%%00010            var cat = categories[catI];%%00010            // take only those freq cols which have missing values in the%%00010            // current category and were not whole excluded%%00010            var cols = missValInCat[catI].filter(function (x) {%%00010                return excludeCols.indexOf(x) === -1;%%00010            });%%00010            if (cols.length &gt; 0) {%%00010                if (cols.length === numLeftCols) {%%00010                    // if all the left freq cols have missing values - exclude%%00010                    // the whole category%%00010                    if (cat === null) {%%00010                        excludeWholeMissValCat = true; // Missing values category will be appended to the end%%00010                    } else {%%00010                        excludeCats.push(cat);%%00010                    }%%00010                } else {%%00010                    // build a string of excluded bars (cat - col1, col2 ...)%%00010                    var label = cat === null ? MISSING_VALUES_LABEL : cat;%%00010                    var exclStr = label + ' - ' + cols.join(', ');%%00010                    if (cat === null) {%%00010                        missValCatBars = exclStr; // Missing values category will be appended to the end%%00010                    } else {%%00010                        excludeBars.push(exclStr);%%00010                    }%%00010                    // for normal categories and also for the Missing values%%00010                    // category (if it's included in the view)%%00010                    // we fill the map of excluded bars (grouped by freq cols) -%%00010                    // needed for Stacked plot%%00010                    if (cat !== null || _value.options.includeMissValCat) {%%00010                        cols.forEach(function (col) {%%00010                            if (typeof excludeFreqColCatMap[col] === 'undefined') {%%00010                                excludeFreqColCatMap[col] = [cat];%%00010                            } else {%%00010                                excludeFreqColCatMap[col].push(cat);%%00010                            }%%00010                        });%%00010                    }%%00010                }%%00010            }%%00010        }%%00010        // exclude smth from Missing values category, if it's included in the%%00010        // view%%00010        if (_value.options.includeMissValCat &amp;&amp; _representation.options.reportOnMissingValues) {%%00010            if (excludeWholeMissValCat) {%%00010                excludeCats.push(MISSING_VALUES_LABEL);%%00010            } else if (typeof missValCatBars !== 'undefined') {%%00010                excludeBars.push(missValCatBars);%%00010            }%%00010        }%%00010%%00010        // Add or remove the non-missing values of the Missing values category%%00010        handleMissingValues(excludeCols, switched, data, dataInd);%%00010%%00010        // Set warning messages%%00010        if (!showWarnings) {%%00010            return;%%00010        }%%00010%%00010        handleWarnings(excludeCols, excludeCats, excludeBars);%%00010    };%%00010%%00010    handleMissingValues = function (excludeCols, switched, data, dataInd) {%%00010        for (var i = 0; i &lt; missValCatValues.length; i++) {%%00010            var item = missValCatValues[i];%%00010            if (excludeCols.indexOf(item.col) !== -1 &amp;&amp; !(!_value.options.includeMissValCat &amp;&amp; switched)) {%%00010                /*%%00010                 * Fact that the freq col is in missValCatValues means it has a non-missing value in Missing values%%00010                 * category. If this col was excluded, that means it has only missing values in all other categories AND%%00010                 * we &quot;don't include MissValCat&quot;. In case it's the first time the plot is building, we don't need to do%%00010                 * anything - call continue. But if a user switched the option &quot;includeMissValCat&quot; from 'on' to 'off',%%00010                 * we need to remove the value of MissValCat from the plot further below.%%00010                 */%%00010                continue;%%00010            }%%00010            // find if the plot has already the data (key-&gt;values) for the current freq col == key%%00010            // data object needs to be reset, otherwise missing values will be added to previous data%%00010            data = null;%%00010            for (var j = 0; j &lt; plotData.length; j++) {%%00010                if (plotData[j].key === item.col) {%%00010                    data = plotData[j];%%00010                    dataInd = j;%%00010                    break;%%00010                }%%00010            }%%00010            if (_value.options.includeMissValCat &amp;&amp; _representation.options.reportOnMissingValues) {%%00010                /* if we include Missing values category to the view, we need to add its values */%%00010                var val = {%%00010                    x: MISSING_VALUES_LABEL,%%00010                    y: item.value%%00010                };%%00010                if (typeof data === 'undefined' || data === null) {%%00010                    plotData.push({%%00010                        key: item.col,%%00010                        values: [val]%%00010                    });%%00010                } else {%%00010                    data.values.push(val);%%00010                }%%00010            } else if (switched) {%%00010                // if we don't include Missing values category to the view AND%%00010                // this option was switched in the view, we need to remove its%%00010                // value%%00010                if (typeof data !== 'undefined' &amp;&amp; data !== null) {%%00010                    data.values.pop();%%00010                    if (data.values.length === 0) {%%00010                        plotData.splice(dataInd, 1);%%00010                    }%%00010                }%%00010            }%%00010        }%%00010    };%%00010%%00010    handleWarnings = function (excludeCols, excludeCats, excludeBars) {%%00010        if (plotData.length === 0) {%%00010            // No data available warnings%%00010            var warning = '';%%00010            if (missValCatValues.length !== 0 &amp;&amp; _representation.options.reportOnMissingValues) {%%00010                warning = 'No chart was generated since all frequency columns have only missing values.\n' +%%00010                    'There are values where the category name is missing.\nTo see them switch on the option &quot;Include ' +%%00010                    '\'Missing values\' category&quot; in the view settings.';%%00010            } else {%%00010                warning = 'No chart was generated since all frequency columns have only missing values or empty.\n' +%%00010                    'Re-run the workflow with different data.';%%00010            }%%00010            knimeService.setWarningMessage(warning, NO_DATA_AVAILABLE);%%00010        } else {%%00010            knimeService.clearWarningMessage(NO_DATA_AVAILABLE);%%00010            // All other warnings%%00010            if (excludeCols.length &gt; 0 &amp;&amp; _representation.options.reportOnMissingValues) {%%00010                knimeService.setWarningMessage(%%00010                    'Following frequency columns are not present or contain only missing values and were ' +%%00010                    'excluded from the view:\n    ' + excludeCols.join(', '), FREQ_COLUMN_MISSING_VALUES_ONLY);%%00010            } else {%%00010                knimeService.clearWarningMessage(FREQ_COLUMN_MISSING_VALUES_ONLY);%%00010            }%%00010%%00010            if (excludeCats.length &gt; 0 &amp;&amp; _representation.options.reportOnMissingValues) {%%00010                knimeService.setWarningMessage(%%00010                    'Following categories contain only missing values and were excluded from the view:\n    ' +%%00010                    excludeCats.join(', '), CATEGORY_MISSING_VALUES_ONLY);%%00010            } else {%%00010                knimeService.clearWarningMessage(CATEGORY_MISSING_VALUES_ONLY);%%00010            }%%00010%%00010            if (excludeBars.length &gt; 0 &amp;&amp; _representation.options.reportOnMissingValues) {%%00010                knimeService.setWarningMessage(%%00010                    'Following bars contain only missing values in frequency column and were excluded from the ' +%%00010                    'view:\n    ' + excludeBars.join('\n    '), MISSING_VALUES_ONLY);%%00010            } else {%%00010                knimeService.clearWarningMessage(MISSING_VALUES_ONLY);%%00010            }%%00010        }%%00010    };%%00010%%00010    /**%%00010     * This is a workaround for the stacked plot problem coming from the nvd3%%00010     * library implementation. They do not really support missing values in the%%00010     * Stacked option: (https://github.com/novus/nvd3/issues/1941 - &quot;The%%00010     * solution is to adjust your data before handing it to nvd3.&quot; - nice%%00010     * answer) The implementation uses a simple d3.layout.stack which requires%%00010     * all data have the same length%%00010     * (https://github.com/d3/d3-3.x-api-reference/blob/master/Stack-Layout.md#_stack)%%00010     * Missing values may lead to different lengths. A workaround here is to add%%00010     * dummy null values in place of excluded bars before drawing to Stacked%%00010     * plot. And remove them before switching to Grouped plot.%%00010     * @param {bool} addDummy - true if dummy is supposed to be added, false otherwise%%00010     * @returns {undefined}%%00010     */%%00010    fixStackedData = function (addDummy) {%%00010        plotData.forEach(function (dataValues) {%%00010            var excludeCats = excludeFreqColCatMap[dataValues.key];%%00010            if (typeof excludeCats === 'undefined') {%%00010                // if this freq col does not have excluded bars at all - nothing%%00010                // to do%%00010                return;%%00010            }%%00010            if (addDummy) {%%00010                // Another implementation thing is that the categories in every%%00010                // freq col must follow the same order.%%00010                // So we cannot simply append dummy nulls to the end.%%00010                // Instead we need to replace the whole &quot;values&quot; array.%%00010                // We go over the categories and add either a real value or a%%00010                // dummy null depending on what's present.%%00010                var i = 0;%%00010                var j = 0;%%00010                var values = dataValues.values;%%00010                var newValues = [];%%00010                categories.forEach(function (cat) {%%00010                    if (cat === null) {%%00010                        return;%%00010                    }%%00010                    if (i &lt; values.length &amp;&amp; values[i].x === cat) {%%00010                        newValues.push(values[i]);%%00010                        i++;%%00010                    } else if (j &lt; excludeCats.length &amp;&amp; excludeCats[j] === cat) {%%00010                        newValues.push({%%00010                            x: cat,%%00010                            y: null%%00010                        });%%00010                        j++;%%00010                    }%%00010                });%%00010                if (i &lt; values.length &amp;&amp; values[i].x === MISSING_VALUES_LABEL) {%%00010                    newValues.push(values[i]);%%00010                } else if (j &lt; excludeCats.length &amp;&amp; excludeCats[j] === null) {%%00010                    newValues.push({%%00010                        x: MISSING_VALUES_LABEL,%%00010                        y: null%%00010                    });%%00010                }%%00010                dataValues.values = newValues;%%00010            } else {%%00010                // remove dummy null values (basically any null values as there%%00010                // can be no other nulls)%%00010                dataValues.values = dataValues.values.filter(function (value) {%%00010                    return value.y !== null;%%00010                });%%00010            }%%00010        });%%00010    };%%00010%%00010    updateTitles = function (updateChart) {%%00010        if (chart) {%%00010            var curTitle = d3.select('#title');%%00010            var curSubtitle = d3.select('#subtitle');%%00010            var chartNeedsUpdating = curTitle.empty() !== !_value.options.title ||%%00010                curSubtitle.empty() !== !_value.options.subtitle;%%00010            if (!_value.options.title) {%%00010                curTitle.remove();%%00010            }%%00010            if (_value.options.title) {%%00010                if (curTitle.empty()) {%%00010                    svg.append('text')%%00010                        .attr('x', 20)%%00010                        .attr('y', 30)%%00010                        .attr('id', 'title')%%00010                        .attr('class', 'knime-title')%%00010                        .text(_value.options.title);%%00010                } else {%%00010                    curTitle.text(_value.options.title);%%00010                }%%00010            }%%00010            if (!_value.options.subtitle) {%%00010                curSubtitle.remove();%%00010            }%%00010            if (_value.options.subtitle) {%%00010                if (curSubtitle.empty()) {%%00010                    svg.append('text')%%00010                        .attr('x', 20)%%00010                        .attr('y', _value.options.title ? 46 : 20)%%00010                        .attr('id', 'subtitle')%%00010                        .attr('class', 'knime-subtitle')%%00010                        .text(_value.options.subtitle);%%00010                } else {%%00010                    curSubtitle.text(_value.options.subtitle).attr('y', _value.options.title ? 46 : 20);%%00010                }%%00010            }%%00010%%00010            var topMargin = 10;%%00010            topMargin += _value.options.title ? 10 : 0;%%00010            topMargin += _value.options.subtitle ? 8 : 0;%%00010            if (_representation.options.legend) {%%00010                chart.legend.margin({%%00010                    top: topMargin,%%00010                    bottom: topMargin%%00010                });%%00010            } else {%%00010                chart.margin({%%00010                    top: topMargin * 2%%00010                });%%00010            }%%00010%%00010            var isTitle = _value.options.title || _value.options.subtitle;%%00010            knimeService.floatingHeader(isTitle);%%00010%%00010            if (updateChart &amp;&amp; chartNeedsUpdating) {%%00010                if (_representation.options.svg.fullscreen &amp;&amp; _representation.runningInView) {%%00010                    var height = isTitle ? '100%' : 'calc(100% - ' + knimeService.headerHeight() + 'px)';%%00010                    layoutContainer.style('height', height)%%00010                        // two rows below force to invalidate the container which%%00010                        // solves a weird problem with vertical scroll bar in IE%%00010                        .style('display', 'none')%%00010                        .style('display', 'block');%%00010                    d3.select('#svgContainer').style('height', height);%%00010                }%%00010                chart.update();%%00010            }%%00010        }%%00010    };%%00010%%00010    /**%%00010     * Updates the axis labels after they have been wrapped. And add a title to%%00010     * show the full name. Additionally adjust the length of the maximum and%%00010     * minimum value on the y-axis.%%00010     * @returns {undefined}%%00010     */%%00010    updateLabels = function () {%%00010        var optShowMaximum = _value.options.showMaximum;%%00010        if (typeof optShowMaximum === 'undefined') {%%00010            optShowMaximum = _representation.options.showMaximum;%%00010        }%%00010        var optOrientation = _value.options.orientation;%%00010        var texts = svg.select('.knime-x').selectAll('text');%%00010        texts.each(function (d, i) {%%00010            if (typeof wrappedPlotData[0].values[i] !== 'undefined') {%%00010                var me = d3.select(this);%%00010                me.text(wrappedPlotData[0].values[i].x);%%00010                me.append('title').classed('knime-tooltip', true);%%00010            }%%00010        });%%00010        var stacked = _value.options.chartType;%%00010        var extremValues = [];%%00010        if (stacked === 'Grouped') {%%00010            extremValues = getRoundedMaxValue(false);%%00010        } else {%%00010            extremValues = getRoundedMaxValue(true);%%00010        }%%00010        var minValue = extremValues[0];%%00010        var maxValue = extremValues[1];%%00010%%00010        var tickAmount = chart.yAxis.ticks();%%00010        if (tickAmount &lt; 2) {%%00010            tickAmount = 2;%%00010        }%%00010%%00010        var textsYMin, textsYMax;%%00010        if (optShowMaximum) {%%00010            if (optOrientation) {%%00010                textsYMin = svg.select('.nv-axisMin-x').selectAll('text');%%00010                textsYMax = svg.select('.nv-axisMax-x').selectAll('text');%%00010            } else {%%00010                textsYMin = svg.select('.nv-axisMin-y').selectAll('text');%%00010                textsYMax = svg.select('.nv-axisMax-y').selectAll('text');%%00010            }%%00010            textsYMin.text(minValue);%%00010            textsYMax.text(maxValue);%%00010        }%%00010%%00010        var labelTooltip = texts.selectAll('.knime-tooltip');%%00010        var counter = 0;%%00010        labelTooltip.each(function () {%%00010            var me = d3.select(this);%%00010            if (typeof plotData[0].values[counter] !== 'undefined') {%%00010                me.text(plotData[0].values[counter].x);%%00010            }%%00010            counter++;%%00010        });%%00010%%00010        // Create titles for the Axis-Tooltips%%00010        svg.select('.knime-y text.knime-axis-label').append('title').classed('knime-tooltip', true).text(%%00010            _value.options.freqLabel);%%00010        svg.select('.knime-x text.knime-axis-label').append('title').classed('knime-tooltip', true).text(%%00010            _value.options.catLabel);%%00010    };%%00010%%00010    getRoundedMaxValue = function (isStacked) {%%00010        var maxValue = 0;%%00010        var minValue = 0;%%00010        var considerNegativeList = false;%%00010        if (isStacked) {%%00010            var stackedExtremValues = getStackedMaxValue (considerNegativeList, maxValue, minValue);%%00010            maxValue = stackedExtremValues.maxValue;%%00010            minValue = stackedExtremValues.minValue;%%00010        } else {%%00010            for (var i = 0; i &lt; plotData.length; i++) {%%00010                if (plotData[i].disabled !== true) {%%00010                    var tempMaxValue = Math.max(d3.max(plotData[i].values, function (d) {%%00010                        return parseFloat(d.y);%%00010                    }), 0);%%00010                    if (tempMaxValue &gt; maxValue) {%%00010                        maxValue = tempMaxValue;%%00010                    }%%00010                    var tempMinValue = Math.min(d3.min(plotData[i].values, function (d) {%%00010                        return parseFloat(d.y);%%00010                    }), 0);%%00010                    if (tempMinValue &lt; minValue) {%%00010                        minValue = tempMinValue;%%00010                    }%%00010                }%%00010            }%%00010        }%%00010%%00010        var tickAmount = chart.yAxis.ticks();%%00010        if (tickAmount &lt; 2) {%%00010            tickAmount = 2;%%00010        }%%00010%%00010        var scale = d3.scale.linear().domain([minValue, maxValue]);%%00010        var ticks = scale.ticks(tickAmount);%%00010        var precision = 1;%%00010        for (var tickI = 0; tickI &lt; ticks.length; tickI++) {%%00010            if (ticks[tickI] !== 0) {%%00010                var curTick = ticks[tickI];%%00010                if (curTick.toString().indexOf('.') &gt;= 0) {%%00010                    // +1 because the precision of the maximum should be one%%00010                    // decimal more then the normal ticks%%00010                    precision = Math.max(curTick.toString().split('.')[1].length + 1, precision);%%00010                } else if (curTick.toString().indexOf('e') &gt;= 0) {%%00010                    precision = Math.max(Math.abs(parseFloat(curTick.toString().split('e')[1])), precision);%%00010                }%%00010            }%%00010        }%%00010%%00010        var roundedMaxValue = Math.ceil(parseFloat(maxValue) * Math.pow(10, precision)) / Math.pow(10, precision);%%00010        var roundedMinValue = Math.floor(parseFloat(minValue) * Math.pow(10, precision)) / Math.pow(10, precision);%%00010        return [roundedMinValue, roundedMaxValue];%%00010    };%%00010%%00010    getStackedMaxValue = function (considerNegativeList, maxValue, minValue) {%%00010        var sumListPositive = [];%%00010        var sumListNegative = [];%%00010        for (var dataI = 0; dataI &lt; plotData.length; dataI++) {%%00010            for (var valueI = 0; valueI &lt; plotData[dataI].values.length; valueI++) {%%00010                if (sumListPositive.length &lt; plotData[dataI].values.length) {%%00010                    sumListPositive.push(0);%%00010                    sumListNegative.push(0);%%00010                }%%00010                if (plotData[dataI].disabled !== true) {%%00010                    if (plotData[dataI].values[valueI].y &gt; 0) {%%00010                        sumListPositive[valueI] += plotData[dataI].values[valueI].y;%%00010                    } else {%%00010                        sumListNegative[valueI] += plotData[dataI].values[valueI].y;%%00010                        considerNegativeList = true;%%00010                    }%%00010                }%%00010            }%%00010        }%%00010        maxValue = d3.max(sumListPositive);%%00010        if (considerNegativeList) {%%00010            minValue = d3.min(sumListNegative);%%00010        }%%00010        return { minValue: minValue, maxValue: maxValue };%%00010    };%%00010%%00010    /**%%00010     * Find the max size of one element on the y-axis to see how much space is needed. To find out the max size, a%%00010     * temp-text object is created and measured. Afterwards that temp-text is deleted (is not visible in the view).%%00010     * @param {bool} optShowMaximum%%00010     * @returns {object}%%00010     */%%00010    function checkMaxSizeYAxis(optShowMaximum) {%%00010        var maxValue = 0;%%00010        var minValue = 0;%%00010        var extremValues = [];%%00010        var stacked = _value.options.chartType;%%00010        if (stacked === 'Grouped') {%%00010            extremValues = getRoundedMaxValue(false);%%00010        } else {%%00010            extremValues = getRoundedMaxValue(true);%%00010        }%%00010        minValue = extremValues[0];%%00010        maxValue = extremValues[1];%%00010%%00010        var svgHeight = parseInt(d3.select('svg').style('height'), 10);%%00010        var svgWidth = parseInt(d3.select('svg').style('width'), 10);%%00010%%00010        // Calculate values of the y-axis to get an impression about the precision.%%00010        var scale = d3.scale.linear().domain([minValue, maxValue]).range(%%00010            [0, _representation.options.svg.height]);%%00010        var defaultTicksAmount = 4;%%00010        var ticks = scale.ticks(defaultTicksAmount);%%00010        if (optShowMaximum) {%%00010            if (maxValue.toString().indexOf('.') &gt; 0) {%%00010                if (ticks[ticks.length - 1].toString().indexOf('.') &gt; 0) {%%00010                    var decimalString = ticks[ticks.length - 1].toString().split('.')[1];%%00010                    ticks.push(parseFloat(maxValue.toFixed(decimalString.length) + 1));%%00010                } else {%%00010                    ticks.push(parseFloat(maxValue.toFixed(0)));%%00010                }%%00010            } else {%%00010                ticks.push(maxValue);%%00010            }%%00010            if (minValue &lt; 0 &amp;&amp; minValue.toString().indexOf('e') &lt; 0) {%%00010                if (ticks[0].toString().split('.')[1]) {%%00010                    ticks.push(minValue.toFixed(ticks[0].toString().split('.')[1].length - 1));%%00010                } else {%%00010                    ticks.push(minValue.toFixed(1));%%00010                }%%00010            } else if (minValue &lt; 0) {%%00010                ticks.push(minValue);%%00010            }%%00010        }%%00010        var configObject = {%%00010            container: document.querySelector('svg'),%%00010            tempContainerClasses: 'knime-axis',%%00010            maxWidth: svgWidth,%%00010            maxHeight: svgHeight%%00010        };%%00010%%00010        var results = knimeService.measureAndTruncate(ticks, configObject);%%00010%%00010        // Return the format to show the result and the space needed to the left border.%%00010        return results;%%00010    }%%00010%%00010    /**%%00010     * Find the max size of the biggest element on the x-Axis. Move the Graph so that this object is completely visible.%%00010     * @param {array} dataValues - the data array of which the chart should be created for%%00010     * @param {bool} staggerLabels - true if x axis labels are staggered (allows more space), false otherwise%%00010     * @returns {object}%%00010     */%%00010    checkMaxSizeXAxis = function (dataValues, staggerLabels) {%%00010        var maxWidth, barWidth, nValue, group, groupValue;%%00010        var optOrientation = _value.options.orientation;%%00010        // var svgHeight = parseInt(d3.select('svg').style('height'));%%00010        var svgWidth = parseInt(d3.select('svg').style('width'), 10);%%00010        var amountOfBars = dataValues[0].values.length;%%00010        var amountOfDimensions = dataValues.length;%%00010%%00010        var spaceBetweenBars = _representation.isHistogram ? 0 : 40;%%00010        if (optOrientation) {%%00010            maxWidth = svgWidth / 2;%%00010        } else {%%00010            if (d3.select('.nv-groups').node() === null) {%%00010                barWidth = svgWidth / amountOfBars - spaceBetweenBars;%%00010            } else {%%00010                barWidth = d3.select('.nv-groups').select('rect')[0][0].width.baseVal.value * amountOfDimensions;%%00010            }%%00010            if (staggerLabels) {%%00010                maxWidth = barWidth * 2;%%00010            } else {%%00010                maxWidth = barWidth;%%00010            }%%00010        }%%00010%%00010        var configObject = {%%00010            container: document.querySelector('svg'),%%00010            tempContainerClasses: 'knime-axis',%%00010            /* maxHeight: svgHeight / amountOfBars, */%%00010            minimalChars: 1%%00010        };%%00010        if (!_representation.isHistogram) {%%00010            configObject.maxWidth = maxWidth;%%00010        }%%00010        var xValues = [];%%00010        for (nValue in dataValues[0].values) {%%00010            xValues.push(dataValues[0].values[nValue].x);%%00010        }%%00010%%00010        var results = knimeService.measureAndTruncate(xValues, configObject);%%00010%%00010        var xExtremValues = [];%%00010        xExtremValues.push(dataValues[0].values[0].x);%%00010        xExtremValues.push(dataValues[0].values[dataValues[0].values.length - 1].x);%%00010%%00010        if (staggerLabels) {%%00010            if (!optOrientation) {%%00010                configObject.maxWidth = svgWidth / amountOfBars - spaceBetweenBars;%%00010            }%%00010        }%%00010        var extremResults = knimeService.measureAndTruncate(xExtremValues, configObject);%%00010%%00010        // Update the cloned data array to contain the wrapped labels%%00010        for (group in dataValues) {%%00010            for (groupValue in dataValues[group].values) {%%00010                if (groupValue === 0) {%%00010                    wrappedPlotData[group].values[groupValue].x = extremResults.values[0].truncated;%%00010                } else if (groupValue === dataValues[group].values.length - 1) {%%00010                    wrappedPlotData[group].values[groupValue].x = extremResults.values[1].truncated;%%00010                } else {%%00010                    var val = results.values[parseInt(groupValue, 10)];%%00010                    wrappedPlotData[group].values[groupValue].x = typeof val === 'undefined' ? null : val.truncated;%%00010                }%%00010            }%%00010        }%%00010        return results;%%00010    };%%00010%%00010    // eslint-disable-next-line complexity%%00010    updateAxisLabels = function (updateChart) {%%00010%%00010        if (chart) {%%00010            var optOrientation = _value.options.orientation;%%00010            var optStaggerLabels = _value.options.staggerLabels;%%00010            var stacked = _value.options.chartType;%%00010            var optShowMaximum = _value.options.showMaximum;%%00010            var curCatAxisLabel, curFreqAxisLabel;%%00010            var curCatAxisLabelElement = d3.select('.nv-x.nv-axis .nv-axis-label');%%00010            var curFreqAxisLabelElement = d3.select('.nv-y.nv-axis .nv-axis-label');%%00010            var freqLabel = _value.options.freqLabel;%%00010            var catLabel = _value.options.catLabel;%%00010            var svgHeight = parseInt(d3.select('svg').style('height'), 10);%%00010            var svgWidth = parseInt(d3.select('svg').style('width'), 10);%%00010%%00010            if (typeof optShowMaximum === 'undefined') {%%00010                optShowMaximum = _representation.options.showMaximum;%%00010            }%%00010%%00010            wrappedPlotData = JSON.parse(JSON.stringify(plotData));%%00010%%00010            if (!curCatAxisLabelElement.empty()) {%%00010                curCatAxisLabel = curCatAxisLabelElement.text();%%00010            }%%00010%%00010            if (!curFreqAxisLabelElement.empty()) {%%00010                curFreqAxisLabel = curCatAxisLabelElement.text();%%00010            }%%00010%%00010            var chartNeedsUpdating = curCatAxisLabel !== _value.options.catLabel ||%%00010                curFreqAxisLabel !== _value.options.freqLabel;%%00010            if (!chartNeedsUpdating) {%%00010                return;%%00010            }%%00010%%00010            var configObject = {%%00010                container: document.querySelector('svg'),%%00010                tempContainerClasses: 'knime-axis',%%00010                maxWidth: svgWidth / 2,%%00010                maxHeight: svgHeight / 2,%%00010                minimalChars: 1%%00010            };%%00010            configObject.tempContainerAttributes = optOrientation ? { transform: 'rotate(-90)' } : '';%%00010            var catLabelSize = knimeService.measureAndTruncate(catLabel ? [catLabel] : [''], configObject);%%00010            configObject.tempContainerAttributes.transform = optOrientation ? '' : { transform: 'rotate(-90)' };%%00010            var freqLabelSize = knimeService.measureAndTruncate(freqLabel ? [freqLabel] : [''], configObject);%%00010%%00010            var maxSizeYAxis = checkMaxSizeYAxis(optShowMaximum);%%00010            var maxSizeXAxis = checkMaxSizeXAxis(wrappedPlotData, optStaggerLabels);%%00010            var svgSize = optOrientation ? parseInt(d3.select('svg').style('width'), 10)%%00010                : parseInt(d3.select('svg').style('height'), 10);%%00010%%00010            freqLabel = freqLabelSize.values[0].truncated;%%00010            catLabel = catLabelSize.values[0].truncated;%%00010%%00010            // space between two labels%%00010            var distanceBetweenLabels = 150;%%00010            var tickAmount = 0;%%00010            var rightMargin = 0;%%00010%%00010            if (optOrientation) {%%00010                tickAmount = parseInt((svgSize - maxSizeXAxis.max.maxWidth) /%%00010                    (maxSizeYAxis.max.maxWidth + distanceBetweenLabels), 10);%%00010                if (optShowMaximum) {%%00010                    // extend the border of the svg to be able to see the complete maximum label%%00010                    // factor 0.6 is chosen to give the label a little space to the border%%00010                    rightMargin = 0.6 * maxSizeYAxis.max.maxWidth;%%00010                }%%00010            } else {%%00010                tickAmount = parseInt((svgSize - maxSizeYAxis.max.maxHeight) /%%00010                    (maxSizeYAxis.max.maxHeight + distanceBetweenLabels), 10);%%00010            }%%00010%%00010            // nvd3 sets the cat label 55 pixel away from the axis. As with changing font size this%%00010            // is not enough, it is easier to calculate it ourselves%%00010            var spacingCatLabel = 25;%%00010%%00010            // nvd3 sets the freq label 20 pixel away from the axis. As with changing font size this%%00010            // is not enough, it is easier to calculate it ourselves%%00010            var spacingFreqLabel = 20;%%00010%%00010            // add some empty space, so that two labels are not to close together%%00010            var additionalEmptySpace = 15;%%00010%%00010            // add some empty space when labels are staggered. Normal empty space is too much.%%00010            var staggerLabelsAdditionalSpace = 5;%%00010%%00010            // space to the y-axis assured by nvd3%%00010            var paddingAmount = 15;%%00010%%00010            var xLabelDistance = 0;%%00010            var yLabelDistance = 0;%%00010            if (optOrientation) {%%00010                // -spacingCatLabel: reset the label to the position of the axis%%00010                // + maxSizeAxis: the calculated space needed by the label itself%%00010                // + additionalEmptySpace: add some empty space%%00010                xLabelDistance = -spacingCatLabel + maxSizeXAxis.max.maxWidth  + additionalEmptySpace;%%00010                yLabelDistance = -spacingFreqLabel + maxSizeYAxis.max.maxHeight;%%00010            } else {%%00010                if (optStaggerLabels) {%%00010                    // -spacingCatLabel: reset the label to the position of the axis%%00010                    // maxSizeAxis * 2: the calculated space needed by the label itself. When staggered there are 2%%00010                    // lines%%00010                    xLabelDistance = -spacingCatLabel + maxSizeXAxis.max.maxHeight * 2  + additionalEmptySpace;%%00010                } else {%%00010                    xLabelDistance = -spacingCatLabel + maxSizeXAxis.max.maxHeight + additionalEmptySpace;%%00010                }%%00010                yLabelDistance = maxSizeYAxis.max.maxWidth - spacingCatLabel + additionalEmptySpace;%%00010            }%%00010%%00010            chart.xAxis.axisLabel(catLabel)%%00010                .axisLabelDistance(xLabelDistance)%%00010                .tickPadding(paddingAmount)%%00010                .showMaxMin(false);%%00010%%00010            chart.yAxis.axisLabel(freqLabel)%%00010                .axisLabelDistance(yLabelDistance)%%00010                .showMaxMin(optShowMaximum)%%00010                .ticks(tickAmount)%%00010                .tickFormat(d3.format('~.g'));%%00010%%00010            var extremValues = [];%%00010            if (stacked === 'Grouped') {%%00010                extremValues = getRoundedMaxValue(false);%%00010            } else {%%00010                extremValues = getRoundedMaxValue(true);%%00010            }%%00010            chart.yDomain([extremValues[0], extremValues[1]]);%%00010%%00010            // calculate the space the charts needs below the actual chart%%00010            // its calculated from the height of the text element,%%00010            // the height of the axis label and some additional space%%00010            var bottomMargin = optOrientation%%00010                ? maxSizeYAxis.max.maxHeight + freqLabelSize.max.maxHeight + additionalEmptySpace%%00010                : maxSizeXAxis.max.maxHeight + catLabelSize.max.maxHeight + additionalEmptySpace;%%00010            var leftMargin = optOrientation%%00010                ? maxSizeXAxis.max.maxWidth + catLabelSize.max.maxWidth + additionalEmptySpace + paddingAmount%%00010                : maxSizeYAxis.max.maxWidth + freqLabelSize.max.maxWidth + additionalEmptySpace;%%00010%%00010            if (!_value.options.catLabel) {%%00010                bottomMargin = optOrientation ? bottomMargin%%00010                    : maxSizeXAxis.max.maxHeight + additionalEmptySpace;%%00010                leftMargin = optOrientation ? leftMargin%%00010                    : maxSizeYAxis.max.maxWidth + freqLabelSize.max.maxWidth + additionalEmptySpace;%%00010            }%%00010            if (!_value.options.freqLabel) {%%00010                bottomMargin = optOrientation ? maxSizeXAxis.max.maxHeight + additionalEmptySpace : bottomMargin;%%00010                leftMargin = optOrientation ? leftMargin + paddingAmount%%00010                    : maxSizeYAxis.max.maxWidth + additionalEmptySpace;%%00010            }%%00010            if (!optOrientation) {%%00010                chart.staggerLabels(optStaggerLabels);%%00010                if (optStaggerLabels) {%%00010                    bottomMargin += _value.options.catLabel ? maxSizeXAxis.max.maxHeight  + staggerLabelsAdditionalSpace%%00010                        : maxSizeXAxis.max.maxHeight / 2 + paddingAmount;%%00010                }%%00010            }%%00010            chart.margin({%%00010                left: leftMargin,%%00010                bottom: bottomMargin,%%00010                right: rightMargin%%00010            });%%00010%%00010            if (updateChart) {%%00010                chart.update();%%00010            }%%00010        }%%00010    };%%00010%%00010    updateChartType = function () {%%00010        if (this.value !== _value.options.chartType) {%%00010            _value.options.chartType = this.value;%%00010            var stacked = this.value === 'Stacked';%%00010            fixStackedData(stacked);%%00010            chart.stacked(stacked);%%00010            drawChart(true);%%00010        }%%00010    };%%00010    // eslint-disable-next-line complexity%%00010    drawControls = function () {%%00010        if (!knimeService) {%%00010            return;%%00010        }%%00010%%00010        if (_representation.options.displayFullscreenButton) {%%00010            knimeService.allowFullscreen();%%00010        }%%00010        if (!_representation.options.enableViewControls) {%%00010            return;%%00010        }%%00010%%00010        var titleEdit = _representation.options.enableTitleEdit;%%00010        var subtitleEdit = _representation.options.enableSubtitleEdit;%%00010        var axisEdit = _representation.options.enableAxisEdit;%%00010        var chartTypeEdit = _representation.options.enableStackedEdit;%%00010        var orientationEdit = _representation.options.enableHorizontalToggle;%%00010        var staggerLabels = _representation.options.enableStaggerToggle;%%00010        var switchMissValCat = _representation.options.enableSwitchMissValCat;%%00010        var showMaximum = _representation.options.enableMaximumValue;%%00010        var enableSelection = _representation.options.enableSelection;%%00010        var displayClearButton = _representation.options.displayClearSelectionButton;%%00010%%00010        if (titleEdit) {%%00010            var chartTitleText = knimeService.createMenuTextField('chartTitleText', _value.options.title,%%00010                function () {%%00010                    if (_value.options.title !== this.value) {%%00010                        _value.options.title = this.value;%%00010                        updateTitles(true);%%00010                    }%%00010                }, true);%%00010            knimeService.addMenuItem('Chart Title:', 'header', chartTitleText);%%00010        }%%00010        if (subtitleEdit) {%%00010            var chartSubtitleText = knimeService.createMenuTextField('chartSubtitleText', _value.options.subtitle,%%00010                function () {%%00010                    if (_value.options.subtitle !== this.value) {%%00010                        _value.options.subtitle = this.value;%%00010                        updateTitles(true);%%00010                    }%%00010                }, true);%%00010            knimeService.addMenuItem('Chart Subtitle:', 'header', chartSubtitleText, null, knimeService.SMALL_ICON);%%00010        }%%00010        if ((titleEdit  || subtitleEdit) &amp;&amp; (axisEdit || orientationEdit || staggerLabels)) {%%00010            knimeService.addMenuDivider();%%00010        }%%00010%%00010        if (axisEdit) {%%00010            var catAxisText = knimeService.createMenuTextField('catAxisText', _value.options.catLabel, function () {%%00010                _value.options.catLabel = this.value;%%00010                updateAxisLabels(true);%%00010            }, true);%%00010            knimeService.addMenuItem('Category axis label:', 'ellipsis-h', catAxisText);%%00010%%00010            var freqAxisText = knimeService.createMenuTextField('freqAxisText', _value.options.freqLabel, function () {%%00010                _value.options.freqLabel = this.value;%%00010                updateAxisLabels(true);%%00010            }, true);%%00010            knimeService.addMenuItem('Frequency axis label:', 'ellipsis-v', freqAxisText);%%00010%%00010            if (switchMissValCat || orientationEdit || staggerLabels || chartTypeEdit) {%%00010                knimeService.addMenuDivider();%%00010            }%%00010        }%%00010%%00010        if (switchMissValCat &amp;&amp; isMissValCat &amp;&amp; _representation.options.reportOnMissingValues) {%%00010            var switchMissValCatCbx =%%00010                knimeService.createMenuCheckbox('switchMissValCatCbx', _value.options.includeMissValCat, function () {%%00010                    if (_value.options.includeMissValCat !== this.checked) {%%00010                        _value.options.includeMissValCat = this.checked;%%00010                        var stacked = _value.options.chartType === 'Stacked';%%00010                        if (stacked) {%%00010                            fixStackedData(false);%%00010                        }%%00010                        processMissingValues(true);%%00010                        if (stacked) {%%00010                            fixStackedData(true);%%00010                        }%%00010                        chart.update();%%00010                    }%%00010                });%%00010            knimeService.addMenuItem('Include \'Missing values\' category: ', 'question', switchMissValCatCbx);%%00010%%00010            if (orientationEdit || staggerLabels || chartTypeEdit) {%%00010                knimeService.addMenuDivider();%%00010            }%%00010        }%%00010%%00010        if (chartTypeEdit) {%%00010            var groupedRadio = knimeService.createMenuRadioButton('groupedRadio', 'chartType', 'Grouped',%%00010                updateChartType);%%00010            groupedRadio.checked = _value.options.chartType === groupedRadio.value;%%00010            knimeService.addMenuItem('Grouped:', 'align-left fa-rotate-270', groupedRadio);%%00010%%00010            var stackedRadio = knimeService.createMenuRadioButton('stackedRadio', 'chartType', 'Stacked',%%00010                updateChartType);%%00010            stackedRadio.checked = _value.options.chartType === stackedRadio.value;%%00010            knimeService.addMenuItem('Stacked:', 'tasks fa-rotate-270', stackedRadio);%%00010%%00010            if (orientationEdit || staggerLabels) {%%00010                knimeService.addMenuDivider();%%00010            }%%00010        }%%00010%%00010        if (orientationEdit) {%%00010            var orientationCbx = knimeService.createMenuCheckbox('orientationCbx', _value.options.orientation,%%00010                function () {%%00010                    if (_value.options.orientation !== this.checked) {%%00010                        _value.options.orientation = this.checked;%%00010                        d3.select('#staggerCbx').property('disabled', this.checked);%%00010                        drawChart(true);%%00010                    }%%00010                });%%00010            knimeService.addMenuItem('Plot horizontal bar chart:', 'align-left', orientationCbx);%%00010        }%%00010%%00010        if (staggerLabels) {%%00010            var staggerCbx = knimeService.createMenuCheckbox('staggerCbx', _value.options.staggerLabels, function () {%%00010                if (_value.options.staggerLabels !== this.checked) {%%00010                    _value.options.staggerLabels = this.checked;%%00010                    drawChart(true);%%00010                }%%00010            });%%00010            staggerCbx.disabled = _value.options.orientation;%%00010            knimeService.addMenuItem('Stagger labels:', 'map-o', staggerCbx);%%00010        }%%00010%%00010        if (showMaximum) {%%00010            var displayMaximumCbx = knimeService.createMenuCheckbox('displayMaximumCbx', _value.options.showMaximum,%%00010                function () {%%00010                    if (_value.options.showMaximum !== this.checked) {%%00010                        _value.options.showMaximum = this.checked;%%00010                        drawChart(true);%%00010                    }%%00010                });%%00010            knimeService.addMenuItem('Display maximum value:', 'arrows-v', displayMaximumCbx);%%00010        }%%00010%%00010        if (enableSelection) {%%00010            knimeService.addMenuDivider();%%00010            var subscribeToSelectionIcon = knimeService.createStackedIcon('check-square-o', 'angle-double-right',%%00010                'faded right sm', 'left bold');%%00010            var subscribeToSelectionMenu = knimeService.createMenuCheckbox('subscribeToSelection',%%00010                _value.options.subscribeToSelection, function () {%%00010                    if (_value.options.subscribeToSelection !== this.checked) {%%00010                        _value.options.subscribeToSelection = this.checked;%%00010                        subscribeToSelection(_value.options.subscribeToSelection);%%00010                    }%%00010                });%%00010            knimeService.addMenuItem('Subscribe to selection:', subscribeToSelectionIcon, subscribeToSelectionMenu);%%00010%%00010            var publishSelectionIcon = knimeService.createStackedIcon('check-square-o', 'angle-right', 'faded left sm',%%00010                'right bold');%%00010            var publishSelectionMenu = knimeService.createMenuCheckbox('publishSelection',%%00010                _value.options.publishSelection, function () {%%00010                    if (_value.options.publishSelection !== this.checked) {%%00010                        _value.options.publishSelection = this.checked;%%00010                        publishSelection(this.checked);%%00010                    }%%00010                });%%00010            knimeService.addMenuItem('Publish selection:', publishSelectionIcon, publishSelectionMenu);%%00010        }%%00010%%00010        if (displayClearButton &amp;&amp;  _representation.options.enableSelection) {%%00010            knimeService.addButton('clearSelectionButton', 'minus-square-o', 'Clear selection', function () {%%00010                d3.selectAll('.row').classed({ selected: false, 'knime-selected': false, unselected: false });%%00010                removeHilightBar('', true);%%00010                _value.options.selection = [];%%00010                publishSelection(true);%%00010            });%%00010            d3.select('#clearSelectionButton').classed('inactive', true);%%00010        }%%00010    };%%00010%%00010    setCssClasses = function () {%%00010        // axis%%00010        var axis = d3.selectAll('.nv-axis')%%00010            .classed('knime-axis', true);%%00010        d3.selectAll('.nv-x')%%00010            .classed('knime-x', true);%%00010        d3.selectAll('.nv-y')%%00010            .classed('knime-y', true);%%00010        d3.selectAll('.nv-axislabel')%%00010            .classed('knime-axis-label', true);%%00010        axis.selectAll('path.domain')%%00010            .classed('knime-axis-line', true);%%00010        var axisMaxMin = d3.selectAll('.nv-axisMaxMin')%%00010            .classed('knime-axis-max-min', true);%%00010        axisMaxMin.selectAll('text')%%00010            .classed('knime-tick-label', true);%%00010        var tick = axis.selectAll('.knime-axis .tick')%%00010            .classed('knime-tick', true);%%00010        tick.selectAll('text')%%00010            .classed('knime-tick-label', true);%%00010        tick.selectAll('line')%%00010            .classed('knime-tick-line', true);%%00010%%00010        // legend%%00010        d3.selectAll('.nv-legendWrap')%%00010            .classed('knime-legend', true);%%00010        d3.selectAll('.nv-legend-symbol')%%00010            .classed('knime-legend-symbol', true);%%00010        d3.selectAll('.nv-legend-text')%%00010            .classed('knime-legend-label', true);%%00010%%00010        // Tooltip for axis labels allows to receive all mouse events%%00010        var axisToolTip = svg.selectAll('.knime-tick-label');%%00010        var labelToolTip = svg.selectAll('.knime-axis-label');%%00010        axisToolTip.style('pointer-events', 'all');%%00010        labelToolTip.style('pointer-events', 'all');%%00010        updateLabels();%%00010        if (_representation.options.enableSelection) {%%00010            registerClickHandler();%%00010        }%%00010    };%%00010%%00010    setTooltipCssClasses = function () {%%00010        // tooltip%%00010        var tooltip = d3.selectAll('.nvtooltip').classed('knime-tooltip', true);%%00010        tooltip.selectAll('.x-value').classed('knime-tooltip-caption', true).classed('knime-x', true);%%00010        tooltip.selectAll('.legend-color-guide').classed('knime-tooltip-color', true);%%00010        tooltip.selectAll('.key').classed('knime-tooltip-key', true);%%00010        tooltip.selectAll('.value').classed('knime-tooltip-value', true);%%00010    };%%00010%%00010    barChart.validate = function () {%%00010        return true;%%00010    };%%00010%%00010    barChart.getComponentValue = function () {%%00010        return _value;%%00010    };%%00010%%00010    barChart.getSVG = function () {%%00010        var svgElement = d3.select('svg')[0][0];%%00010        knimeService.inlineSvgStyles(svgElement);%%00010%%00010        // Return the SVG as a string.%%00010        return (new XMLSerializer()).serializeToString(svgElement);%%00010    };%%00010%%00010    return barChart;%%00010})();%%00010"/>
</config>
<config key="cssCode">
<entry key="array-size" type="xint" value="1"/>
<entry key="0" type="xstring" value="/* make sure colors on bars are correct (inherit from group) */%%00010svg.colored .nvd3 .nv-multibar .nv-groups rect, %%00010svg.colored .nvd3 .nv-multibarHorizontal .nv-groups rect, %%00010svg.colored .nvd3 .nv-discretebar .nv-groups rect {%%00010%%00009fill: inherit !important;%%00010%%00009stroke: inherit !important;%%00010}%%00010%%00010text.knime-tick-label.knime-selected {%%00010%%00009font-weight: bold;%%00010}%%00010rect.knime-selected {%%00010%%00009fill: orange;%%00010%%00009%%00010}%%00010rect.knime-partially-selected {%%00010%%00009fill: grey;%%00010}%%00010text.knime-tick-label.knime-partially-selected {%%00010%%00009font-weight: bold;%%00010}%%00010%%00010rect.nv-bar.positive {%%00010%%00009cursor:pointer;%%00010}%%00010%%00010/* don't display the maximum grid line if present on vertical bar chart */%%00010/*.nv-multiBarWithLegend .knime-axis.knime-y g.tick.knime-tick:nth-last-child(3) line {%%00010    display: none;%%00010}*/"/>
</config>
<config key="jsDependencies">
<entry key="numSettings" type="xint" value="2"/>
<config key="dependency_0">
<entry key="name" type="xstring" value="nvd3"/>
<entry key="path" type="xstring" value="js-lib/nvd3/1.8.6/nv.d3.min.js"/>
<entry key="usesDefine" type="xboolean" value="false"/>
<entry key="exports" type="xstring" value="nv"/>
<config key="dependencies">
<entry key="array-size" type="xint" value="1"/>
<entry key="0" type="xstring" value="D3_3.5.5"/>
</config>
<entry key="local" type="xboolean" value="true"/>
</config>
<config key="dependency_1">
<entry key="name" type="xstring" value="D3_3.5.5"/>
<entry key="path" type="xstring" value="js-lib/d3/d3.v3_5_5.min.js"/>
<entry key="usesDefine" type="xboolean" value="false"/>
<entry key="exports" type="xstring" isnull="true" value=""/>
<config key="dependencies">
<entry key="array-size" type="xint" value="0"/>
</config>
<entry key="local" type="xboolean" value="true"/>
</config>
</config>
<config key="cssDependencies">
<entry key="array-size" type="xint" value="1"/>
<entry key="0" type="xstring" value="js-lib/nvd3/1.8.6/nv.d3.min.css"/>
</config>
<entry key="new" type="xboolean" value="false"/>
<entry key="inView" type="xboolean" value="true"/>
<config key="tableIds">
<entry key="array-size" type="xint" value="2"/>
<entry key="0" type="xstring" value="fc7617a5-b8b5-4d54-a5f2-3744ef02916e"/>
<entry key="1" type="xstring" isnull="true" value=""/>
</config>
<config key="variables">
<entry key="numSettings" type="xint" value="1"/>
<entry key="mapClass" type="xstring" value="string"/>
<entry key="key_0" type="xstring" value="knime.workspace"/>
<entry key="class_0" type="xstring" value="java.lang.String"/>
<entry key="value_0" type="xstring" value="C:\Users\franc\knime-workspace"/>
</config>
<config key="binaryFiles">
<entry key="numSettings" type="xint" value="0"/>
<entry key="mapClass" type="xstring" value="string"/>
</config>
<config key="options">
<entry key="numSettings" type="xint" value="22"/>
<entry key="mapClass" type="xstring" value="object"/>
<entry key="key_0" type="xstring" value="displayFullscreenButton"/>
<entry key="class_0" type="xstring" value="java.lang.Boolean"/>
<entry key="value_0" type="xboolean" value="true"/>
<entry key="key_1" type="xstring" value="displayClearSelectionButton"/>
<entry key="class_1" type="xstring" value="java.lang.Boolean"/>
<entry key="value_1" type="xboolean" value="true"/>
<entry key="key_2" type="xstring" value="svg"/>
<entry key="class_2" type="xstring" value="org.knime.dynamic.js.SettingsModelSVGOptions$JSONSVGOptions"/>
<config key="value_2">
<entry key="width" type="xint" value="800"/>
<entry key="height" type="xint" value="600"/>
<entry key="fullscreen" type="xboolean" value="true"/>
</config>
<entry key="key_3" type="xstring" value="legend"/>
<entry key="class_3" type="xstring" value="java.lang.Boolean"/>
<entry key="value_3" type="xboolean" value="true"/>
<entry key="key_4" type="xstring" value="enableHorizontalToggle"/>
<entry key="class_4" type="xstring" value="java.lang.Boolean"/>
<entry key="value_4" type="xboolean" value="true"/>
<entry key="key_5" type="xstring" value="freq"/>
<entry key="class_5" type="xstring" value="[Ljava.lang.String;"/>
<config key="value_5">
<entry key="array-size" type="xint" value="3"/>
<entry key="0" type="xstring" value="Deaths"/>
<entry key="1" type="xstring" value="Recovered"/>
<entry key="2" type="xstring" value="Active"/>
</config>
<entry key="key_6" type="xstring" value="tooltip"/>
<entry key="class_6" type="xstring" value="java.lang.Boolean"/>
<entry key="value_6" type="xboolean" value="true"/>
<entry key="key_7" type="xstring" value="enableTitleEdit"/>
<entry key="class_7" type="xstring" value="java.lang.Boolean"/>
<entry key="value_7" type="xboolean" value="true"/>
<entry key="key_8" type="xstring" value="enableSelection"/>
<entry key="class_8" type="xstring" value="java.lang.Boolean"/>
<entry key="value_8" type="xboolean" value="true"/>
<entry key="key_9" type="xstring" value="sort"/>
<entry key="class_9" type="xstring" value="java.lang.Boolean"/>
<entry key="value_9" type="xboolean" value="false"/>
<entry key="key_10" type="xstring" value="enableSwitchMissValCat"/>
<entry key="class_10" type="xstring" value="java.lang.Boolean"/>
<entry key="value_10" type="xboolean" value="true"/>
<entry key="key_11" type="xstring" value="enableStackedEdit"/>
<entry key="class_11" type="xstring" value="java.lang.Boolean"/>
<entry key="value_11" type="xboolean" value="true"/>
<entry key="key_12" type="xstring" value="enableAxisEdit"/>
<entry key="class_12" type="xstring" value="java.lang.Boolean"/>
<entry key="value_12" type="xboolean" value="true"/>
<entry key="key_13" type="xstring" value="processInMemory"/>
<entry key="class_13" type="xstring" value="java.lang.Boolean"/>
<entry key="value_13" type="xboolean" value="true"/>
<entry key="key_14" type="xstring" value="reportOnMissingValues"/>
<entry key="class_14" type="xstring" value="java.lang.Boolean"/>
<entry key="value_14" type="xboolean" value="true"/>
<entry key="key_15" type="xstring" value="cat"/>
<entry key="class_15" type="xstring" value="java.lang.String"/>
<entry key="value_15" type="xstring" value="Date (#1)"/>
<entry key="key_16" type="xstring" value="enableStaggerToggle"/>
<entry key="class_16" type="xstring" value="java.lang.Boolean"/>
<entry key="value_16" type="xboolean" value="true"/>
<entry key="key_17" type="xstring" value="enableViewControls"/>
<entry key="class_17" type="xstring" value="java.lang.Boolean"/>
<entry key="value_17" type="xboolean" value="true"/>
<entry key="key_18" type="xstring" value="showWarnings"/>
<entry key="class_18" type="xstring" value="java.lang.Boolean"/>
<entry key="value_18" type="xboolean" value="true"/>
<entry key="key_19" type="xstring" value="enableSubtitleEdit"/>
<entry key="class_19" type="xstring" value="java.lang.Boolean"/>
<entry key="value_19" type="xboolean" value="true"/>
<entry key="key_20" type="xstring" value="aggr"/>
<entry key="class_20" type="xstring" value="java.lang.String"/>
<entry key="value_20" type="xstring" value="Sum"/>
<entry key="key_21" type="xstring" value="enableMaximumValue"/>
<entry key="class_21" type="xstring" value="java.lang.Boolean"/>
<entry key="value_21" type="xboolean" value="true"/>
</config>
<config key="inObjects">
<entry key="numSettings" type="xint" value="2"/>
<config key="inObject_0">
<entry key="className" type="xstring" value="org.knime.dynamic.js.base.grouped.GroupedProcessor$GroupingResult"/>
<entry key="jsonValue" type="xstring" value="{&quot;table&quot;:{&quot;@class&quot;:&quot;org.knime.js.core.JSONDataTable&quot;,&quot;id&quot;:&quot;963aaf5d-2736-4ac0-b251-613b964f391e&quot;,&quot;rows&quot;:[{&quot;data&quot;:[&quot;2020-01-22T00:00:00Z&quot;,0.0,0.0,0.0],&quot;rowKey&quot;:&quot;Row0&quot;},{&quot;data&quot;:[&quot;2020-01-23T00:00:00Z&quot;,0.0,0.0,0.0],&quot;rowKey&quot;:&quot;Row1&quot;},{&quot;data&quot;:[&quot;2020-01-24T00:00:00Z&quot;,0.0,0.0,0.0],&quot;rowKey&quot;:&quot;Row2&quot;},{&quot;data&quot;:[&quot;2020-01-25T00:00:00Z&quot;,0.0,0.0,0.0],&quot;rowKey&quot;:&quot;Row3&quot;},{&quot;data&quot;:[&quot;2020-01-26T00:00:00Z&quot;,0.0,0.0,0.0],&quot;rowKey&quot;:&quot;Row4&quot;},{&quot;data&quot;:[&quot;2020-01-27T00:00:00Z&quot;,0.0,0.0,0.0],&quot;rowKey&quot;:&quot;Row5&quot;},{&quot;data&quot;:[&quot;2020-01-28T00:00:00Z&quot;,0.0,0.0,0.0],&quot;rowKey&quot;:&quot;Row6&quot;},{&quot;data&quot;:[&quot;2020-01-29T00:00:00Z&quot;,0.0,0.0,0.0],&quot;rowKey&quot;:&quot;Row7&quot;},{&quot;data&quot;:[&quot;2020-01-30T00:00:00Z&quot;,0.0,0.0,0.0],&quot;rowKey&quot;:&quot;Row8&quot;},{&quot;data&quot;:[&quot;2020-01-31T00:00:00Z&quot;,0.0,0.0,0.0],&quot;rowKey&quot;:&quot;Row9&quot;},{&quot;data&quot;:[&quot;2020-02-01T00:00:00Z&quot;,0.0,0.0,0.0],&quot;rowKey&quot;:&quot;Row10&quot;},{&quot;data&quot;:[&quot;2020-02-02T00:00:00Z&quot;,0.0,0.0,0.0],&quot;rowKey&quot;:&quot;Row11&quot;},{&quot;data&quot;:[&quot;2020-02-03T00:00:00Z&quot;,0.0,0.0,0.0],&quot;rowKey&quot;:&quot;Row12&quot;},{&quot;data&quot;:[&quot;2020-02-04T00:00:00Z&quot;,0.0,0.0,0.0],&quot;rowKey&quot;:&quot;Row13&quot;},{&quot;data&quot;:[&quot;2020-02-05T00:00:00Z&quot;,0.0,0.0,0.0],&quot;rowKey&quot;:&quot;Row14&quot;},{&quot;data&quot;:[&quot;2020-02-06T00:00:00Z&quot;,0.0,0.0,0.0],&quot;rowKey&quot;:&quot;Row15&quot;},{&quot;data&quot;:[&quot;2020-02-07T00:00:00Z&quot;,0.0,0.0,0.0],&quot;rowKey&quot;:&quot;Row16&quot;},{&quot;data&quot;:[&quot;2020-02-08T00:00:00Z&quot;,0.0,0.0,0.0],&quot;rowKey&quot;:&quot;Row17&quot;},{&quot;data&quot;:[&quot;2020-02-09T00:00:00Z&quot;,0.0,0.0,0.0],&quot;rowKey&quot;:&quot;Row18&quot;},{&quot;data&quot;:[&quot;2020-02-10T00:00:00Z&quot;,0.0,0.0,0.0],&quot;rowKey&quot;:&quot;Row19&quot;},{&quot;data&quot;:[&quot;2020-02-11T00:00:00Z&quot;,0.0,0.0,0.0],&quot;rowKey&quot;:&quot;Row20&quot;},{&quot;data&quot;:[&quot;2020-02-12T00:00:00Z&quot;,0.0,0.0,0.0],&quot;rowKey&quot;:&quot;Row21&quot;},{&quot;data&quot;:[&quot;2020-02-13T00:00:00Z&quot;,0.0,0.0,0.0],&quot;rowKey&quot;:&quot;Row22&quot;},{&quot;data&quot;:[&quot;2020-02-14T00:00:00Z&quot;,0.0,0.0,0.0],&quot;rowKey&quot;:&quot;Row23&quot;},{&quot;data&quot;:[&quot;2020-02-15T00:00:00Z&quot;,0.0,0.0,0.0],&quot;rowKey&quot;:&quot;Row24&quot;},{&quot;data&quot;:[&quot;2020-02-16T00:00:00Z&quot;,0.0,0.0,0.0],&quot;rowKey&quot;:&quot;Row25&quot;},{&quot;data&quot;:[&quot;2020-02-17T00:00:00Z&quot;,0.0,0.0,0.0],&quot;rowKey&quot;:&quot;Row26&quot;},{&quot;data&quot;:[&quot;2020-02-18T00:00:00Z&quot;,0.0,0.0,0.0],&quot;rowKey&quot;:&quot;Row27&quot;},{&quot;data&quot;:[&quot;2020-02-19T00:00:00Z&quot;,0.0,0.0,0.0],&quot;rowKey&quot;:&quot;Row28&quot;},{&quot;data&quot;:[&quot;2020-02-20T00:00:00Z&quot;,0.0,0.0,0.0],&quot;rowKey&quot;:&quot;Row29&quot;},{&quot;data&quot;:[&quot;2020-02-21T00:00:00Z&quot;,0.0,0.0,0.0],&quot;rowKey&quot;:&quot;Row30&quot;},{&quot;data&quot;:[&quot;2020-02-22T00:00:00Z&quot;,0.0,0.0,0.0],&quot;rowKey&quot;:&quot;Row31&quot;},{&quot;data&quot;:[&quot;2020-02-23T00:00:00Z&quot;,0.0,0.0,0.0],&quot;rowKey&quot;:&quot;Row32&quot;},{&quot;data&quot;:[&quot;2020-02-24T00:00:00Z&quot;,0.0,0.0,0.0],&quot;rowKey&quot;:&quot;Row33&quot;},{&quot;data&quot;:[&quot;2020-02-25T00:00:00Z&quot;,0.0,0.0,0.0],&quot;rowKey&quot;:&quot;Row34&quot;},{&quot;data&quot;:[&quot;2020-02-26T00:00:00Z&quot;,0.0,0.0,0.0],&quot;rowKey&quot;:&quot;Row35&quot;},{&quot;data&quot;:[&quot;2020-02-27T00:00:00Z&quot;,0.0,0.0,0.0],&quot;rowKey&quot;:&quot;Row36&quot;},{&quot;data&quot;:[&quot;2020-02-28T00:00:00Z&quot;,0.0,0.0,0.0],&quot;rowKey&quot;:&quot;Row37&quot;},{&quot;data&quot;:[&quot;2020-02-29T00:00:00Z&quot;,0.0,0.0,0.0],&quot;rowKey&quot;:&quot;Row38&quot;},{&quot;data&quot;:[&quot;2020-03-01T00:00:00Z&quot;,0.0,0.0,0.0],&quot;rowKey&quot;:&quot;Row39&quot;},{&quot;data&quot;:[&quot;2020-03-02T00:00:00Z&quot;,0.0,0.0,2.0],&quot;rowKey&quot;:&quot;Row40&quot;},{&quot;data&quot;:[&quot;2020-03-03T00:00:00Z&quot;,0.0,0.0,2.0],&quot;rowKey&quot;:&quot;Row41&quot;},{&quot;data&quot;:[&quot;2020-03-04T00:00:00Z&quot;,0.0,0.0,5.0],&quot;rowKey&quot;:&quot;Row42&quot;},{&quot;data&quot;:[&quot;2020-03-05T00:00:00Z&quot;,0.0,0.0,8.0],&quot;rowKey&quot;:&quot;Row43&quot;},{&quot;data&quot;:[&quot;2020-03-06T00:00:00Z&quot;,0.0,0.0,13.0],&quot;rowKey&quot;:&quot;Row44&quot;},{&quot;data&quot;:[&quot;2020-03-07T00:00:00Z&quot;,0.0,0.0,20.0],&quot;rowKey&quot;:&quot;Row45&quot;},{&quot;data&quot;:[&quot;2020-03-08T00:00:00Z&quot;,0.0,0.0,30.0],&quot;rowKey&quot;:&quot;Row46&quot;},{&quot;data&quot;:[&quot;2020-03-09T00:00:00Z&quot;,0.0,0.0,30.0],&quot;rowKey&quot;:&quot;Row47&quot;},{&quot;data&quot;:[&quot;2020-03-10T00:00:00Z&quot;,0.0,0.0,41.0],&quot;rowKey&quot;:&quot;Row48&quot;},{&quot;data&quot;:[&quot;2020-03-11T00:00:00Z&quot;,0.0,0.0,59.0],&quot;rowKey&quot;:&quot;Row49&quot;},{&quot;data&quot;:[&quot;2020-03-12T00:00:00Z&quot;,0.0,0.0,59.0],&quot;rowKey&quot;:&quot;Row50&quot;},{&quot;data&quot;:[&quot;2020-03-13T00:00:00Z&quot;,0.0,1.0,111.0],&quot;rowKey&quot;:&quot;Row51&quot;},{&quot;data&quot;:[&quot;2020-03-14T00:00:00Z&quot;,0.0,2.0,167.0],&quot;rowKey&quot;:&quot;Row52&quot;},{&quot;data&quot;:[&quot;2020-03-15T00:00:00Z&quot;,0.0,2.0,243.0],&quot;rowKey&quot;:&quot;Row53&quot;},{&quot;data&quot;:[&quot;2020-03-16T00:00:00Z&quot;,0.0,3.0,328.0],&quot;rowKey&quot;:&quot;Row54&quot;},{&quot;data&quot;:[&quot;2020-03-17T00:00:00Z&quot;,1.0,3.0,444.0],&quot;rowKey&quot;:&quot;Row55&quot;},{&quot;data&quot;:[&quot;2020-03-18T00:00:00Z&quot;,2.0,3.0,443.0],&quot;rowKey&quot;:&quot;Row56&quot;},{&quot;data&quot;:[&quot;2020-03-19T00:00:00Z&quot;,3.0,3.0,779.0],&quot;rowKey&quot;:&quot;Row57&quot;},{&quot;data&quot;:[&quot;2020-03-20T00:00:00Z&quot;,6.0,5.0,1009.0],&quot;rowKey&quot;:&quot;Row58&quot;},{&quot;data&quot;:[&quot;2020-03-21T00:00:00Z&quot;,12.0,5.0,1263.0],&quot;rowKey&quot;:&quot;Row59&quot;},{&quot;data&quot;:[&quot;2020-03-22T00:00:00Z&quot;,14.0,5.0,1581.0],&quot;rowKey&quot;:&quot;Row60&quot;},{&quot;data&quot;:[&quot;2020-03-23T00:00:00Z&quot;,23.0,5.0,2032.0],&quot;rowKey&quot;:&quot;Row61&quot;},{&quot;data&quot;:[&quot;2020-03-24T00:00:00Z&quot;,33.0,22.0,2307.0],&quot;rowKey&quot;:&quot;Row62&quot;},{&quot;data&quot;:[&quot;2020-03-25T00:00:00Z&quot;,43.0,22.0,2930.0],&quot;rowKey&quot;:&quot;Row63&quot;},{&quot;data&quot;:[&quot;2020-03-26T00:00:00Z&quot;,60.0,43.0,3441.0],&quot;rowKey&quot;:&quot;Row64&quot;},{&quot;data&quot;:[&quot;2020-03-27T00:00:00Z&quot;,76.0,43.0,4149.0],&quot;rowKey&quot;:&quot;Row65&quot;},{&quot;data&quot;:[&quot;2020-03-28T00:00:00Z&quot;,100.0,43.0,5027.0],&quot;rowKey&quot;:&quot;Row66&quot;},{&quot;data&quot;:[&quot;2020-03-29T00:00:00Z&quot;,119.0,43.0,5800.0],&quot;rowKey&quot;:&quot;Row67&quot;},{&quot;data&quot;:[&quot;2020-03-30T00:00:00Z&quot;,140.0,43.0,6225.0],&quot;rowKey&quot;:&quot;Row68&quot;},{&quot;data&quot;:[&quot;2020-03-31T00:00:00Z&quot;,160.0,43.0,7240.0],&quot;rowKey&quot;:&quot;Row69&quot;},{&quot;data&quot;:[&quot;2020-04-01T00:00:00Z&quot;,187.0,43.0,8021.0],&quot;rowKey&quot;:&quot;Row70&quot;},{&quot;data&quot;:[&quot;2020-04-02T00:00:00Z&quot;,209.0,68.0,8757.0],&quot;rowKey&quot;:&quot;Row71&quot;},{&quot;data&quot;:[&quot;2020-04-03T00:00:00Z&quot;,246.0,68.0,9572.0],&quot;rowKey&quot;:&quot;Row72&quot;},{&quot;data&quot;:[&quot;2020-04-04T00:00:00Z&quot;,266.0,75.0,10183.0],&quot;rowKey&quot;:&quot;Row73&quot;},{&quot;data&quot;:[&quot;2020-04-05T00:00:00Z&quot;,295.0,75.0,10908.0],&quot;rowKey&quot;:&quot;Row74&quot;},{&quot;data&quot;:[&quot;2020-04-06T00:00:00Z&quot;,311.0,140.0,11279.0],&quot;rowKey&quot;:&quot;Row75&quot;},{&quot;data&quot;:[&quot;2020-04-07T00:00:00Z&quot;,345.0,184.0,11913.0],&quot;rowKey&quot;:&quot;Row76&quot;},{&quot;data&quot;:[&quot;2020-04-08T00:00:00Z&quot;,380.0,196.0,12565.0],&quot;rowKey&quot;:&quot;Row77&quot;},{&quot;data&quot;:[&quot;2020-04-09T00:00:00Z&quot;,409.0,205.0,13342.0],&quot;rowKey&quot;:&quot;Row78&quot;},{&quot;data&quot;:[&quot;2020-04-10T00:00:00Z&quot;,435.0,233.0,14804.0],&quot;rowKey&quot;:&quot;Row79&quot;},{&quot;data&quot;:[&quot;2020-04-11T00:00:00Z&quot;,470.0,266.0,15251.0],&quot;rowKey&quot;:&quot;Row80&quot;},{&quot;data&quot;:[&quot;2020-04-12T00:00:00Z&quot;,504.0,277.0,15804.0],&quot;rowKey&quot;:&quot;Row81&quot;},{&quot;data&quot;:[&quot;2020-04-13T00:00:00Z&quot;,535.0,277.0,16122.0],&quot;rowKey&quot;:&quot;Row82&quot;},{&quot;data&quot;:[&quot;2020-04-14T00:00:00Z&quot;,567.0,347.0,16534.0],&quot;rowKey&quot;:&quot;Row83&quot;},{&quot;data&quot;:[&quot;2020-04-15T00:00:00Z&quot;,599.0,383.0,17109.0],&quot;rowKey&quot;:&quot;Row84&quot;},{&quot;data&quot;:[&quot;2020-04-16T00:00:00Z&quot;,629.0,493.0,17719.0],&quot;rowKey&quot;:&quot;Row85&quot;},{&quot;data&quot;:[&quot;2020-04-17T00:00:00Z&quot;,657.0,519.0,17846.0],&quot;rowKey&quot;:&quot;Row86&quot;},{&quot;data&quot;:[&quot;2020-04-18T00:00:00Z&quot;,687.0,610.0,18388.0],&quot;rowKey&quot;:&quot;Row87&quot;},{&quot;data&quot;:[&quot;2020-04-19T00:00:00Z&quot;,714.0,610.0,18882.0],&quot;rowKey&quot;:&quot;Row88&quot;},{&quot;data&quot;:[&quot;2020-04-20T00:00:00Z&quot;,735.0,610.0,19518.0],&quot;rowKey&quot;:&quot;Row89&quot;},{&quot;data&quot;:[&quot;2020-04-21T00:00:00Z&quot;,762.0,917.0,19700.0],&quot;rowKey&quot;:&quot;Row90&quot;},{&quot;data&quot;:[&quot;2020-04-22T00:00:00Z&quot;,785.0,1143.0,20054.0],&quot;rowKey&quot;:&quot;Row91&quot;},{&quot;data&quot;:[&quot;2020-04-23T00:00:00Z&quot;,820.0,1201.0,20332.0],&quot;rowKey&quot;:&quot;Row92&quot;},{&quot;data&quot;:[&quot;2020-04-24T00:00:00Z&quot;,854.0,1228.0,20715.0],&quot;rowKey&quot;:&quot;Row93&quot;},{&quot;data&quot;:[&quot;2020-04-25T00:00:00Z&quot;,880.0,1277.0,21235.0],&quot;rowKey&quot;:&quot;Row94&quot;},{&quot;data&quot;:[&quot;2020-04-26T00:00:00Z&quot;,903.0,1329.0,21632.0],&quot;rowKey&quot;:&quot;Row95&quot;},{&quot;data&quot;:[&quot;2020-04-27T00:00:00Z&quot;,928.0,1357.0,21742.0],&quot;rowKey&quot;:&quot;Row96&quot;},{&quot;data&quot;:[&quot;2020-04-28T00:00:00Z&quot;,948.0,1389.0,21985.0],&quot;rowKey&quot;:&quot;Row97&quot;},{&quot;data&quot;:[&quot;2020-04-29T00:00:00Z&quot;,973.0,1470.0,22062.0],&quot;rowKey&quot;:&quot;Row98&quot;},{&quot;data&quot;:[&quot;2020-04-30T00:00:00Z&quot;,989.0,1519.0,22537.0],&quot;rowKey&quot;:&quot;Row99&quot;},{&quot;data&quot;:[&quot;2020-05-01T00:00:00Z&quot;,1007.0,1647.0,22697.0],&quot;rowKey&quot;:&quot;Row100&quot;},{&quot;data&quot;:[&quot;2020-05-02T00:00:00Z&quot;,1023.0,1671.0,22496.0],&quot;rowKey&quot;:&quot;Row101&quot;},{&quot;data&quot;:[&quot;2020-05-03T00:00:00Z&quot;,1043.0,1689.0,22550.0],&quot;rowKey&quot;:&quot;Row102&quot;},{&quot;data&quot;:[&quot;2020-05-04T00:00:00Z&quot;,1063.0,1712.0,22749.0],&quot;rowKey&quot;:&quot;Row103&quot;},{&quot;data&quot;:[&quot;2020-05-05T00:00:00Z&quot;,1074.0,1743.0,22885.0],&quot;rowKey&quot;:&quot;Row104&quot;},{&quot;data&quot;:[&quot;2020-05-06T00:00:00Z&quot;,1089.0,2076.0,23017.0],&quot;rowKey&quot;:&quot;Row105&quot;},{&quot;data&quot;:[&quot;2020-05-07T00:00:00Z&quot;,1105.0,2258.0,23352.0],&quot;rowKey&quot;:&quot;Row106&quot;},{&quot;data&quot;:[&quot;2020-05-08T00:00:00Z&quot;,1114.0,2422.0,23732.0],&quot;rowKey&quot;:&quot;Row107&quot;},{&quot;data&quot;:[&quot;2020-05-09T00:00:00Z&quot;,1126.0,2499.0,23781.0],&quot;rowKey&quot;:&quot;Row108&quot;},{&quot;data&quot;:[&quot;2020-05-10T00:00:00Z&quot;,1135.0,2549.0,23897.0],&quot;rowKey&quot;:&quot;Row109&quot;},{&quot;data&quot;:[&quot;2020-05-11T00:00:00Z&quot;,1144.0,2549.0,23986.0],&quot;rowKey&quot;:&quot;Row110&quot;},{&quot;data&quot;:[&quot;2020-05-12T00:00:00Z&quot;,1163.0,3013.0,23737.0],&quot;rowKey&quot;:&quot;Row111&quot;},{&quot;data&quot;:[&quot;2020-05-13T00:00:00Z&quot;,1175.0,3182.0,23775.0],&quot;rowKey&quot;:&quot;Row112&quot;},{&quot;data&quot;:[&quot;2020-05-14T00:00:00Z&quot;,1184.0,3198.0,23937.0],&quot;rowKey&quot;:&quot;Row113&quot;},{&quot;data&quot;:[&quot;2020-05-15T00:00:00Z&quot;,1190.0,3328.0,24065.0],&quot;rowKey&quot;:&quot;Row114&quot;},{&quot;data&quot;:[&quot;2020-05-16T00:00:00Z&quot;,1203.0,3822.0,23785.0],&quot;rowKey&quot;:&quot;Row115&quot;},{&quot;data&quot;:[&quot;2020-05-17T00:00:00Z&quot;,1218.0,4636.0,23182.0],&quot;rowKey&quot;:&quot;Row116&quot;},{&quot;data&quot;:[&quot;2020-05-18T00:00:00Z&quot;,1231.0,6430.0,21548.0],&quot;rowKey&quot;:&quot;Row117&quot;},{&quot;data&quot;:[&quot;2020-05-19T00:00:00Z&quot;,1247.0,6431.0,21754.0],&quot;rowKey&quot;:&quot;Row118&quot;},{&quot;data&quot;:[&quot;2020-05-20T00:00:00Z&quot;,1263.0,6452.0,21945.0],&quot;rowKey&quot;:&quot;Row119&quot;},{&quot;data&quot;:[&quot;2020-05-21T00:00:00Z&quot;,1277.0,6452.0,22183.0],&quot;rowKey&quot;:&quot;Row120&quot;},{&quot;data&quot;:[&quot;2020-05-22T00:00:00Z&quot;,1289.0,7590.0,21321.0],&quot;rowKey&quot;:&quot;Row121&quot;},{&quot;data&quot;:[&quot;2020-05-23T00:00:00Z&quot;,1302.0,7705.0,21464.0],&quot;rowKey&quot;:&quot;Row122&quot;},{&quot;data&quot;:[&quot;2020-05-24T00:00:00Z&quot;,1316.0,17549.0,11758.0],&quot;rowKey&quot;:&quot;Row123&quot;},{&quot;data&quot;:[&quot;2020-05-25T00:00:00Z&quot;,1330.0,17822.0,11636.0],&quot;rowKey&quot;:&quot;Row124&quot;},{&quot;data&quot;:[&quot;2020-05-26T00:00:00Z&quot;,1342.0,18096.0,11569.0],&quot;rowKey&quot;:&quot;Row125&quot;},{&quot;data&quot;:[&quot;2020-05-27T00:00:00Z&quot;,1356.0,18349.0,11587.0],&quot;rowKey&quot;:&quot;Row126&quot;},{&quot;data&quot;:[&quot;2020-05-28T00:00:00Z&quot;,1369.0,18637.0,11590.0],&quot;rowKey&quot;:&quot;Row127&quot;},{&quot;data&quot;:[&quot;2020-05-29T00:00:00Z&quot;,1383.0,18911.0,11652.0],&quot;rowKey&quot;:&quot;Row128&quot;},{&quot;data&quot;:[&quot;2020-05-30T00:00:00Z&quot;,1396.0,19186.0,11621.0],&quot;rowKey&quot;:&quot;Row129&quot;},{&quot;data&quot;:[&quot;2020-05-31T00:00:00Z&quot;,1410.0,19409.0,11681.0],&quot;rowKey&quot;:&quot;Row130&quot;},{&quot;data&quot;:[&quot;2020-06-01T00:00:00Z&quot;,1424.0,19552.0,11724.0],&quot;rowKey&quot;:&quot;Row131&quot;},{&quot;data&quot;:[&quot;2020-06-02T00:00:00Z&quot;,1436.0,19869.0,11590.0],&quot;rowKey&quot;:&quot;Row132&quot;},{&quot;data&quot;:[&quot;2020-06-03T00:00:00Z&quot;,1447.0,20079.0,11735.0],&quot;rowKey&quot;:&quot;Row133&quot;},{&quot;data&quot;:[&quot;2020-06-04T00:00:00Z&quot;,1455.0,20323.0,11814.0],&quot;rowKey&quot;:&quot;Row134&quot;},{&quot;data&quot;:[&quot;2020-06-05T00:00:00Z&quot;,1465.0,20526.0,11978.0],&quot;rowKey&quot;:&quot;Row135&quot;},{&quot;data&quot;:[&quot;2020-06-06T00:00:00Z&quot;,1474.0,20807.0,12070.0],&quot;rowKey&quot;:&quot;Row136&quot;},{&quot;data&quot;:[&quot;2020-06-07T00:00:00Z&quot;,1479.0,20995.0,12219.0],&quot;rowKey&quot;:&quot;Row137&quot;},{&quot;data&quot;:[&quot;2020-06-08T00:00:00Z&quot;,1485.0,21156.0,12244.0],&quot;rowKey&quot;:&quot;Row138&quot;},{&quot;data&quot;:[&quot;2020-06-09T00:00:00Z&quot;,1492.0,21339.0,12475.0],&quot;rowKey&quot;:&quot;Row139&quot;},{&quot;data&quot;:[&quot;2020-06-10T00:00:00Z&quot;,1497.0,21742.0,12361.0],&quot;rowKey&quot;:&quot;Row140&quot;},{&quot;data&quot;:[&quot;2020-06-11T00:00:00Z&quot;,1504.0,22002.0,12404.0],&quot;rowKey&quot;:&quot;Row141&quot;},{&quot;data&quot;:[&quot;2020-06-12T00:00:00Z&quot;,1505.0,22200.0,12475.0],&quot;rowKey&quot;:&quot;Row142&quot;},{&quot;data&quot;:[&quot;2020-06-13T00:00:00Z&quot;,1512.0,22438.0,12513.0],&quot;rowKey&quot;:&quot;Row143&quot;},{&quot;data&quot;:[&quot;2020-06-14T00:00:00Z&quot;,1517.0,22669.0,12504.0],&quot;rowKey&quot;:&quot;Row144&quot;},{&quot;data&quot;:[&quot;2020-06-15T00:00:00Z&quot;,1520.0,22852.0,12664.0],&quot;rowKey&quot;:&quot;Row145&quot;},{&quot;data&quot;:[&quot;2020-06-16T00:00:00Z&quot;,1522.0,23212.0,12602.0],&quot;rowKey&quot;:&quot;Row146&quot;},{&quot;data&quot;:[&quot;2020-06-17T00:00:00Z&quot;,1523.0,23580.0,12569.0],&quot;rowKey&quot;:&quot;Row147&quot;},{&quot;data&quot;:[&quot;2020-06-18T00:00:00Z&quot;,1524.0,24010.0,12555.0],&quot;rowKey&quot;:&quot;Row148&quot;},{&quot;data&quot;:[&quot;2020-06-19T00:00:00Z&quot;,1527.0,24477.0,12460.0],&quot;rowKey&quot;:&quot;Row149&quot;},{&quot;data&quot;:[&quot;2020-06-20T00:00:00Z&quot;,1528.0,24906.0,12407.0],&quot;rowKey&quot;:&quot;Row150&quot;},{&quot;data&quot;:[&quot;2020-06-21T00:00:00Z&quot;,1530.0,25376.0,12227.0],&quot;rowKey&quot;:&quot;Row151&quot;},{&quot;data&quot;:[&quot;2020-06-22T00:00:00Z&quot;,1534.0,25548.0,12310.0],&quot;rowKey&quot;:&quot;Row152&quot;},{&quot;data&quot;:[&quot;2020-06-23T00:00:00Z&quot;,1540.0,25829.0,12368.0],&quot;rowKey&quot;:&quot;Row153&quot;},{&quot;data&quot;:[&quot;2020-06-24T00:00:00Z&quot;,1543.0,26083.0,12478.0],&quot;rowKey&quot;:&quot;Row154&quot;},{&quot;data&quot;:[&quot;2020-06-25T00:00:00Z&quot;,1549.0,26382.0,12484.0],&quot;rowKey&quot;:&quot;Row155&quot;},{&quot;data&quot;:[&quot;2020-06-26T00:00:00Z&quot;,1555.0,26633.0,12678.0],&quot;rowKey&quot;:&quot;Row156&quot;},{&quot;data&quot;:[&quot;2020-06-27T00:00:00Z&quot;,1561.0,26864.0,12764.0],&quot;rowKey&quot;:&quot;Row157&quot;},{&quot;data&quot;:[&quot;2020-06-28T00:00:00Z&quot;,1564.0,27066.0,13016.0],&quot;rowKey&quot;:&quot;Row158&quot;},{&quot;data&quot;:[&quot;2020-06-29T00:00:00Z&quot;,1568.0,27205.0,13139.0],&quot;rowKey&quot;:&quot;Row159&quot;},{&quot;data&quot;:[&quot;2020-06-30T00:00:00Z&quot;,1576.0,27505.0,13060.0],&quot;rowKey&quot;:&quot;Row160&quot;},{&quot;data&quot;:[&quot;2020-07-01T00:00:00Z&quot;,1579.0,27798.0,13077.0],&quot;rowKey&quot;:&quot;Row161&quot;},{&quot;data&quot;:[&quot;2020-07-02T00:00:00Z&quot;,1587.0,28097.0,13098.0],&quot;rowKey&quot;:&quot;Row162&quot;},{&quot;data&quot;:[&quot;2020-07-03T00:00:00Z&quot;,1598.0,28424.0,13134.0],&quot;rowKey&quot;:&quot;Row163&quot;},{&quot;data&quot;:[&quot;2020-07-04T00:00:00Z&quot;,1605.0,28772.0,13192.0],&quot;rowKey&quot;:&quot;Row164&quot;},{&quot;data&quot;:[&quot;2020-07-05T00:00:00Z&quot;,1614.0,29017.0,13266.0],&quot;rowKey&quot;:&quot;Row165&quot;},{&quot;data&quot;:[&quot;2020-07-06T00:00:00Z&quot;,1620.0,29166.0,13343.0],&quot;rowKey&quot;:&quot;Row166&quot;},{&quot;data&quot;:[&quot;2020-07-07T00:00:00Z&quot;,1629.0,29445.0,13342.0],&quot;rowKey&quot;:&quot;Row167&quot;},{&quot;data&quot;:[&quot;2020-07-08T00:00:00Z&quot;,1631.0,29714.0,13514.0],&quot;rowKey&quot;:&quot;Row168&quot;},{&quot;data&quot;:[&quot;2020-07-09T00:00:00Z&quot;,1644.0,30049.0,13584.0],&quot;rowKey&quot;:&quot;Row169&quot;},{&quot;data&quot;:[&quot;2020-07-10T00:00:00Z&quot;,1646.0,30350.0,13683.0],&quot;rowKey&quot;:&quot;Row170&quot;},{&quot;data&quot;:[&quot;2020-07-11T00:00:00Z&quot;,1654.0,30655.0,13912.0],&quot;rowKey&quot;:&quot;Row171&quot;},{&quot;data&quot;:[&quot;2020-07-12T00:00:00Z&quot;,1660.0,30907.0,13945.0],&quot;rowKey&quot;:&quot;Row172&quot;},{&quot;data&quot;:[&quot;2020-07-13T00:00:00Z&quot;,1662.0,31065.0,14091.0],&quot;rowKey&quot;:&quot;Row173&quot;},{&quot;data&quot;:[&quot;2020-07-14T00:00:00Z&quot;,1668.0,31550.0,13833.0],&quot;rowKey&quot;:&quot;Row174&quot;},{&quot;data&quot;:[&quot;2020-07-15T00:00:00Z&quot;,1676.0,32110.0,13640.0],&quot;rowKey&quot;:&quot;Row175&quot;},{&quot;data&quot;:[&quot;2020-07-16T00:00:00Z&quot;,1679.0,32476.0,13610.0],&quot;rowKey&quot;:&quot;Row176&quot;},{&quot;data&quot;:[&quot;2020-07-17T00:00:00Z&quot;,1682.0,32790.0,13605.0],&quot;rowKey&quot;:&quot;Row177&quot;},{&quot;data&quot;:[&quot;2020-07-18T00:00:00Z&quot;,1684.0,33153.0,13553.0],&quot;rowKey&quot;:&quot;Row178&quot;},{&quot;data&quot;:[&quot;2020-07-19T00:00:00Z&quot;,1689.0,33369.0,13578.0],&quot;rowKey&quot;:&quot;Row179&quot;},{&quot;data&quot;:[&quot;2020-07-20T00:00:00Z&quot;,1691.0,33547.0,13533.0],&quot;rowKey&quot;:&quot;Row180&quot;},{&quot;data&quot;:[&quot;2020-07-21T00:00:00Z&quot;,1697.0,33769.0,13432.0],&quot;rowKey&quot;:&quot;Row181&quot;},{&quot;data&quot;:[&quot;2020-07-22T00:00:00Z&quot;,1702.0,33999.0,13449.0],&quot;rowKey&quot;:&quot;Row182&quot;},{&quot;data&quot;:[&quot;2020-07-23T00:00:00Z&quot;,1705.0,34369.0,13305.0],&quot;rowKey&quot;:&quot;Row183&quot;},{&quot;data&quot;:[&quot;2020-07-24T00:00:00Z&quot;,1712.0,34687.0,13293.0],&quot;rowKey&quot;:&quot;Row184&quot;},{&quot;data&quot;:[&quot;2020-07-25T00:00:00Z&quot;,1716.0,35010.0,13229.0],&quot;rowKey&quot;:&quot;Row185&quot;},{&quot;data&quot;:[&quot;2020-07-26T00:00:00Z&quot;,1717.0,35217.0,13230.0],&quot;rowKey&quot;:&quot;Row186&quot;},{&quot;data&quot;:[&quot;2020-07-27T00:00:00Z&quot;,1719.0,35375.0,13205.0],&quot;rowKey&quot;:&quot;Row187&quot;},{&quot;data&quot;:[&quot;2020-07-28T00:00:00Z&quot;,1722.0,35626.0,13062.0],&quot;rowKey&quot;:&quot;Row188&quot;},{&quot;data&quot;:[&quot;2020-07-29T00:00:00Z&quot;,1725.0,35875.0,13013.0],&quot;rowKey&quot;:&quot;Row189&quot;},{&quot;data&quot;:[&quot;2020-07-30T00:00:00Z&quot;,1727.0,36140.0,13001.0],&quot;rowKey&quot;:&quot;Row190&quot;},{&quot;data&quot;:[&quot;2020-07-31T00:00:00Z&quot;,1735.0,36483.0,12854.0],&quot;rowKey&quot;:&quot;Row191&quot;},{&quot;data&quot;:[&quot;2020-08-01T00:00:00Z&quot;,1737.0,36783.0,12790.0],&quot;rowKey&quot;:&quot;Row192&quot;},{&quot;data&quot;:[&quot;2020-08-02T00:00:00Z&quot;,1738.0,36984.0,12741.0],&quot;rowKey&quot;:&quot;Row193&quot;},{&quot;data&quot;:[&quot;2020-08-03T00:00:00Z&quot;,1738.0,37111.0,12720.0],&quot;rowKey&quot;:&quot;Row194&quot;},{&quot;data&quot;:[&quot;2020-08-04T00:00:00Z&quot;,1739.0,37318.0,12624.0],&quot;rowKey&quot;:&quot;Row195&quot;},{&quot;data&quot;:[&quot;2020-08-05T00:00:00Z&quot;,1740.0,37565.0,12543.0],&quot;rowKey&quot;:&quot;Row196&quot;},{&quot;data&quot;:[&quot;2020-08-06T00:00:00Z&quot;,1743.0,37840.0,12478.0],&quot;rowKey&quot;:&quot;Row197&quot;},{&quot;data&quot;:[&quot;2020-08-07T00:00:00Z&quot;,1746.0,38087.0,12518.0],&quot;rowKey&quot;:&quot;Row198&quot;},{&quot;data&quot;:[&quot;2020-08-08T00:00:00Z&quot;,1750.0,38364.0,12423.0],&quot;rowKey&quot;:&quot;Row199&quot;},{&quot;data&quot;:[&quot;2020-08-09T00:00:00Z&quot;,1756.0,38511.0,12401.0],&quot;rowKey&quot;:&quot;Row200&quot;},{&quot;data&quot;:[&quot;2020-08-10T00:00:00Z&quot;,1759.0,38600.0,12466.0],&quot;rowKey&quot;:&quot;Row201&quot;},{&quot;data&quot;:[&quot;2020-08-11T00:00:00Z&quot;,1761.0,38760.0,12424.0],&quot;rowKey&quot;:&quot;Row202&quot;},{&quot;data&quot;:[&quot;2020-08-12T00:00:00Z&quot;,1764.0,38940.0,12519.0],&quot;rowKey&quot;:&quot;Row203&quot;},{&quot;data&quot;:[&quot;2020-08-13T00:00:00Z&quot;,1770.0,39177.0,12601.0],&quot;rowKey&quot;:&quot;Row204&quot;},{&quot;data&quot;:[&quot;2020-08-14T00:00:00Z&quot;,1772.0,39374.0,12637.0],&quot;rowKey&quot;:&quot;Row205&quot;},{&quot;data&quot;:[&quot;2020-08-15T00:00:00Z&quot;,1775.0,39585.0,12621.0],&quot;rowKey&quot;:&quot;Row206&quot;},{&quot;data&quot;:[&quot;2020-08-16T00:00:00Z&quot;,1778.0,39697.0,12627.0],&quot;rowKey&quot;:&quot;Row207&quot;},{&quot;data&quot;:[&quot;2020-08-17T00:00:00Z&quot;,1779.0,39800.0,12655.0],&quot;rowKey&quot;:&quot;Row208&quot;},{&quot;data&quot;:[&quot;2020-08-18T00:00:00Z&quot;,1784.0,39936.0,12728.0],&quot;rowKey&quot;:&quot;Row209&quot;},{&quot;data&quot;:[&quot;2020-08-19T00:00:00Z&quot;,1786.0,40129.0,12786.0],&quot;rowKey&quot;:&quot;Row210&quot;},{&quot;data&quot;:[&quot;2020-08-20T00:00:00Z&quot;,1788.0,40264.0,12940.0],&quot;rowKey&quot;:&quot;Row211&quot;},{&quot;data&quot;:[&quot;2020-08-21T00:00:00Z&quot;,1792.0,40473.0,12946.0],&quot;rowKey&quot;:&quot;Row212&quot;},{&quot;data&quot;:[&quot;2020-08-22T00:00:00Z&quot;,1794.0,40652.0,13006.0],&quot;rowKey&quot;:&quot;Row213&quot;},{&quot;data&quot;:[&quot;2020-08-23T00:00:00Z&quot;,1796.0,40774.0,13027.0],&quot;rowKey&quot;:&quot;Row214&quot;},{&quot;data&quot;:[&quot;2020-08-24T00:00:00Z&quot;,1801.0,40880.0,13039.0],&quot;rowKey&quot;:&quot;Row215&quot;},{&quot;data&quot;:[&quot;2020-08-25T00:00:00Z&quot;,1805.0,41021.0,13086.0],&quot;rowKey&quot;:&quot;Row216&quot;},{&quot;data&quot;:[&quot;2020-08-26T00:00:00Z&quot;,1807.0,41184.0,13283.0],&quot;rowKey&quot;:&quot;Row217&quot;},{&quot;data&quot;:[&quot;2020-08-27T00:00:00Z&quot;,1809.0,41357.0,13507.0],&quot;rowKey&quot;:&quot;Row218&quot;},{&quot;data&quot;:[&quot;2020-08-28T00:00:00Z&quot;,1815.0,41556.0,13703.0],&quot;rowKey&quot;:&quot;Row219&quot;},{&quot;data&quot;:[&quot;2020-08-29T00:00:00Z&quot;,1818.0,41766.0,13864.0],&quot;rowKey&quot;:&quot;Row220&quot;},{&quot;data&quot;:[&quot;2020-08-30T00:00:00Z&quot;,1819.0,41885.0,14064.0],&quot;rowKey&quot;:&quot;Row221&quot;},{&quot;data&quot;:[&quot;2020-08-31T00:00:00Z&quot;,1822.0,41961.0,14229.0],&quot;rowKey&quot;:&quot;Row222&quot;},{&quot;data&quot;:[&quot;2020-09-01T00:00:00Z&quot;,1824.0,42104.0,14315.0],&quot;rowKey&quot;:&quot;Row223&quot;},{&quot;data&quot;:[&quot;2020-09-02T00:00:00Z&quot;,1827.0,42233.0,14573.0],&quot;rowKey&quot;:&quot;Row224&quot;},{&quot;data&quot;:[&quot;2020-09-03T00:00:00Z&quot;,1829.0,42427.0,14795.0],&quot;rowKey&quot;:&quot;Row225&quot;},{&quot;data&quot;:[&quot;2020-09-04T00:00:00Z&quot;,1833.0,42576.0,15048.0],&quot;rowKey&quot;:&quot;Row226&quot;},{&quot;data&quot;:[&quot;2020-09-05T00:00:00Z&quot;,1838.0,42793.0,15312.0],&quot;rowKey&quot;:&quot;Row227&quot;},{&quot;data&quot;:[&quot;2020-09-06T00:00:00Z&quot;,1840.0,42953.0,15465.0],&quot;rowKey&quot;:&quot;Row228&quot;},{&quot;data&quot;:[&quot;2020-09-07T00:00:00Z&quot;,1843.0,43016.0,15648.0],&quot;rowKey&quot;:&quot;Row229&quot;},{&quot;data&quot;:[&quot;2020-09-08T00:00:00Z&quot;,1846.0,43146.0,15903.0],&quot;rowKey&quot;:&quot;Row230&quot;},{&quot;data&quot;:[&quot;2020-09-09T00:00:00Z&quot;,1849.0,43284.0,16408.0],&quot;rowKey&quot;:&quot;Row231&quot;},{&quot;data&quot;:[&quot;2020-09-10T00:00:00Z&quot;,1852.0,43441.0,16833.0],&quot;rowKey&quot;:&quot;Row232&quot;},{&quot;data&quot;:[&quot;2020-09-11T00:00:00Z&quot;,1855.0,43644.0,17314.0],&quot;rowKey&quot;:&quot;Row233&quot;},{&quot;data&quot;:[&quot;2020-09-12T00:00:00Z&quot;,1860.0,43894.0,17556.0],&quot;rowKey&quot;:&quot;Row234&quot;},{&quot;data&quot;:[&quot;2020-09-13T00:00:00Z&quot;,1867.0,44069.0,18047.0],&quot;rowKey&quot;:&quot;Row235&quot;},{&quot;data&quot;:[&quot;2020-09-14T00:00:00Z&quot;,1871.0,44185.0,18540.0],&quot;rowKey&quot;:&quot;Row236&quot;},{&quot;data&quot;:[&quot;2020-09-15T00:00:00Z&quot;,1875.0,44362.0,18784.0],&quot;rowKey&quot;:&quot;Row237&quot;},{&quot;data&quot;:[&quot;2020-09-16T00:00:00Z&quot;,1878.0,44528.0,19220.0],&quot;rowKey&quot;:&quot;Row238&quot;},{&quot;data&quot;:[&quot;2020-09-17T00:00:00Z&quot;,1888.0,44794.0,19714.0],&quot;rowKey&quot;:&quot;Row239&quot;},{&quot;data&quot;:[&quot;2020-09-18T00:00:00Z&quot;,1894.0,45053.0,20229.0],&quot;rowKey&quot;:&quot;Row240&quot;},{&quot;data&quot;:[&quot;2020-09-19T00:00:00Z&quot;,1899.0,45404.0,20722.0],&quot;rowKey&quot;:&quot;Row241&quot;},{&quot;data&quot;:[&quot;2020-09-20T00:00:00Z&quot;,1912.0,45596.0,21069.0],&quot;rowKey&quot;:&quot;Row242&quot;},{&quot;data&quot;:[&quot;2020-09-21T00:00:00Z&quot;,1920.0,45736.0,21544.0],&quot;rowKey&quot;:&quot;Row243&quot;},{&quot;data&quot;:[&quot;2020-09-22T00:00:00Z&quot;,1925.0,45974.0,21764.0],&quot;rowKey&quot;:&quot;Row244&quot;},{&quot;data&quot;:[&quot;2020-09-23T00:00:00Z&quot;,1928.0,46290.0,22247.0],&quot;rowKey&quot;:&quot;Row245&quot;},{&quot;data&quot;:[&quot;2020-09-24T00:00:00Z&quot;,1931.0,46676.0,22549.0],&quot;rowKey&quot;:&quot;Row246&quot;},{&quot;data&quot;:[&quot;2020-09-25T00:00:00Z&quot;,1936.0,47003.0,23116.0],&quot;rowKey&quot;:&quot;Row247&quot;},{&quot;data&quot;:[&quot;2020-09-26T00:00:00Z&quot;,1944.0,47380.0,23615.0],&quot;rowKey&quot;:&quot;Row248&quot;},{&quot;data&quot;:[&quot;2020-09-27T00:00:00Z&quot;,1953.0,47647.0,24004.0],&quot;rowKey&quot;:&quot;Row249&quot;},{&quot;data&quot;:[&quot;2020-09-28T00:00:00Z&quot;,1957.0,47884.0,24188.0],&quot;rowKey&quot;:&quot;Row250&quot;},{&quot;data&quot;:[&quot;2020-09-29T00:00:00Z&quot;,1963.0,48193.0,24561.0],&quot;rowKey&quot;:&quot;Row251&quot;},{&quot;data&quot;:[&quot;2020-09-30T00:00:00Z&quot;,1971.0,48530.0,25041.0],&quot;rowKey&quot;:&quot;Row252&quot;},{&quot;data&quot;:[&quot;2020-10-01T00:00:00Z&quot;,1977.0,48937.0,25482.0],&quot;rowKey&quot;:&quot;Row253&quot;},{&quot;data&quot;:[&quot;2020-10-02T00:00:00Z&quot;,1983.0,49359.0,25942.0],&quot;rowKey&quot;:&quot;Row254&quot;},{&quot;data&quot;:[&quot;2020-10-03T00:00:00Z&quot;,1995.0,49845.0,26407.0],&quot;rowKey&quot;:&quot;Row255&quot;},{&quot;data&quot;:[&quot;2020-10-04T00:00:00Z&quot;,2005.0,50207.0,26939.0],&quot;rowKey&quot;:&quot;Row256&quot;},{&quot;data&quot;:[&quot;2020-10-05T00:00:00Z&quot;,2018.0,50454.0,27413.0],&quot;rowKey&quot;:&quot;Row257&quot;},{&quot;data&quot;:[&quot;2020-10-06T00:00:00Z&quot;,2032.0,50712.0,27568.0],&quot;rowKey&quot;:&quot;Row258&quot;},{&quot;data&quot;:[&quot;2020-10-07T00:00:00Z&quot;,2040.0,51037.0,28179.0],&quot;rowKey&quot;:&quot;Row259&quot;},{&quot;data&quot;:[&quot;2020-10-08T00:00:00Z&quot;,2050.0,51517.0,28967.0],&quot;rowKey&quot;:&quot;Row260&quot;},{&quot;data&quot;:[&quot;2020-10-09T00:00:00Z&quot;,2062.0,52164.0,29702.0],&quot;rowKey&quot;:&quot;Row261&quot;},{&quot;data&quot;:[&quot;2020-10-10T00:00:00Z&quot;,2067.0,52803.0,30704.0],&quot;rowKey&quot;:&quot;Row262&quot;},{&quot;data&quot;:[&quot;2020-10-11T00:00:00Z&quot;,2080.0,53187.0,31397.0],&quot;rowKey&quot;:&quot;Row263&quot;},{&quot;data&quot;:[&quot;2020-10-12T00:00:00Z&quot;,2094.0,53498.0,32321.0],&quot;rowKey&quot;:&quot;Row264&quot;},{&quot;data&quot;:[&quot;2020-10-13T00:00:00Z&quot;,2110.0,54047.0,32964.0],&quot;rowKey&quot;:&quot;Row265&quot;},{&quot;data&quot;:[&quot;2020-10-14T00:00:00Z&quot;,2117.0,54493.0,34583.0],&quot;rowKey&quot;:&quot;Row266&quot;},{&quot;data&quot;:[&quot;2020-10-15T00:00:00Z&quot;,2128.0,55081.0,36085.0],&quot;rowKey&quot;:&quot;Row267&quot;},{&quot;data&quot;:[&quot;2020-10-16T00:00:00Z&quot;,2149.0,56066.0,37687.0],&quot;rowKey&quot;:&quot;Row268&quot;},{&quot;data&quot;:[&quot;2020-10-17T00:00:00Z&quot;,2162.0,57919.0,37974.0],&quot;rowKey&quot;:&quot;Row269&quot;},{&quot;data&quot;:[&quot;2020-10-18T00:00:00Z&quot;,2181.0,59000.0,38730.0],&quot;rowKey&quot;:&quot;Row270&quot;},{&quot;data&quot;:[&quot;2020-10-19T00:00:00Z&quot;,2198.0,59966.0,39696.0],&quot;rowKey&quot;:&quot;Row271&quot;},{&quot;data&quot;:[&quot;2020-10-20T00:00:00Z&quot;,2213.0,61898.0,39625.0],&quot;rowKey&quot;:&quot;Row272&quot;},{&quot;data&quot;:[&quot;2020-10-21T00:00:00Z&quot;,2229.0,63238.0,40804.0],&quot;rowKey&quot;:&quot;Row273&quot;},{&quot;data&quot;:[&quot;2020-10-22T00:00:00Z&quot;,2245.0,64531.0,42765.0],&quot;rowKey&quot;:&quot;Row274&quot;},{&quot;data&quot;:[&quot;2020-10-23T00:00:00Z&quot;,2276.0,65880.0,44284.0],&quot;rowKey&quot;:&quot;Row275&quot;},{&quot;data&quot;:[&quot;2020-10-24T00:00:00Z&quot;,2297.0,67842.0,45970.0],&quot;rowKey&quot;:&quot;Row276&quot;},{&quot;data&quot;:[&quot;2020-10-25T00:00:00Z&quot;,2316.0,68877.0,47493.0],&quot;rowKey&quot;:&quot;Row277&quot;},{&quot;data&quot;:[&quot;2020-10-26T00:00:00Z&quot;,2343.0,69956.0,48834.0],&quot;rowKey&quot;:&quot;Row278&quot;},{&quot;data&quot;:[&quot;2020-10-27T00:00:00Z&quot;,2371.0,72344.0,49717.0],&quot;rowKey&quot;:&quot;Row279&quot;},{&quot;data&quot;:[&quot;2020-10-28T00:00:00Z&quot;,2395.0,74001.0,51996.0],&quot;rowKey&quot;:&quot;Row280&quot;},{&quot;data&quot;:[&quot;2020-10-29T00:00:00Z&quot;,2428.0,75702.0,54486.0],&quot;rowKey&quot;:&quot;Row281&quot;},{&quot;data&quot;:[&quot;2020-10-30T00:00:00Z&quot;,2468.0,77449.0,57355.0],&quot;rowKey&quot;:&quot;Row282&quot;},{&quot;data&quot;:[&quot;2020-10-31T00:00:00Z&quot;,2507.0,80280.0,58492.0],&quot;rowKey&quot;:&quot;Row283&quot;},{&quot;data&quot;:[&quot;2020-11-01T00:00:00Z&quot;,2544.0,81771.0,60026.0],&quot;rowKey&quot;:&quot;Row284&quot;},{&quot;data&quot;:[&quot;2020-11-02T00:00:00Z&quot;,2590.0,83294.0,60963.0],&quot;rowKey&quot;:&quot;Row285&quot;},{&quot;data&quot;:[&quot;2020-11-03T00:00:00Z&quot;,2635.0,86589.0,60219.0],&quot;rowKey&quot;:&quot;Row286&quot;},{&quot;data&quot;:[&quot;2020-11-04T00:00:00Z&quot;,2694.0,88946.0,65300.0],&quot;rowKey&quot;:&quot;Row287&quot;},{&quot;data&quot;:[&quot;2020-11-05T00:00:00Z&quot;,2740.0,91453.0,67157.0],&quot;rowKey&quot;:&quot;Row288&quot;},{&quot;data&quot;:[&quot;2020-11-06T00:00:00Z&quot;,2792.0,93754.0,70354.0],&quot;rowKey&quot;:&quot;Row289&quot;},{&quot;data&quot;:[&quot;2020-11-07T00:00:00Z&quot;,2848.0,97747.0,72945.0],&quot;rowKey&quot;:&quot;Row290&quot;},{&quot;data&quot;:[&quot;2020-11-08T00:00:00Z&quot;,2896.0,99781.0,76647.0],&quot;rowKey&quot;:&quot;Row291&quot;},{&quot;data&quot;:[&quot;2020-11-09T00:00:00Z&quot;,2959.0,102083.0,78378.0],&quot;rowKey&quot;:&quot;Row292&quot;},{&quot;data&quot;:[&quot;2020-11-10T00:00:00Z&quot;,3021.0,106878.0,77338.0],&quot;rowKey&quot;:&quot;Row293&quot;}],&quot;fragment&quot;:false,&quot;filtered&quot;:false,&quot;spec&quot;:{&quot;@class&quot;:&quot;org.knime.js.core.JSONDataTableSpec&quot;,&quot;numRows&quot;:294,&quot;minValues&quot;:[&quot;2020-01-22T00:00:00Z&quot;,0.0,0.0,0.0],&quot;colTypes&quot;:[&quot;string&quot;,&quot;number&quot;,&quot;number&quot;,&quot;number&quot;],&quot;numExtensions&quot;:0,&quot;knimeTypes&quot;:[&quot;String&quot;,&quot;Number (integer)&quot;,&quot;Number (integer)&quot;,&quot;Number (integer)&quot;],&quot;numColumns&quot;:4,&quot;colNames&quot;:[&quot;Date (#1)&quot;,&quot;Deaths&quot;,&quot;Recovered&quot;,&quot;Active&quot;],&quot;rowSizeValues&quot;:null,&quot;hiddenColumns&quot;:[],&quot;maxValues&quot;:[&quot;2020-11-10T00:00:00Z&quot;,3021.0,106878.0,78378.0],&quot;extensionNames&quot;:[],&quot;extensionTypes&quot;:[],&quot;rowColorValues&quot;:[&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;],&quot;containsMissingValues&quot;:[false,false,false,false],&quot;filterIds&quot;:[null,null,null,null],&quot;possibleValues&quot;:[[&quot;2020-01-22T00:00:00Z&quot;,&quot;2020-01-23T00:00:00Z&quot;,&quot;2020-01-24T00:00:00Z&quot;,&quot;2020-01-25T00:00:00Z&quot;,&quot;2020-01-26T00:00:00Z&quot;,&quot;2020-01-27T00:00:00Z&quot;,&quot;2020-01-28T00:00:00Z&quot;,&quot;2020-01-29T00:00:00Z&quot;,&quot;2020-01-30T00:00:00Z&quot;,&quot;2020-01-31T00:00:00Z&quot;,&quot;2020-02-01T00:00:00Z&quot;,&quot;2020-02-02T00:00:00Z&quot;,&quot;2020-02-03T00:00:00Z&quot;,&quot;2020-02-04T00:00:00Z&quot;,&quot;2020-02-05T00:00:00Z&quot;,&quot;2020-02-06T00:00:00Z&quot;,&quot;2020-02-07T00:00:00Z&quot;,&quot;2020-02-08T00:00:00Z&quot;,&quot;2020-02-09T00:00:00Z&quot;,&quot;2020-02-10T00:00:00Z&quot;,&quot;2020-02-11T00:00:00Z&quot;,&quot;2020-02-12T00:00:00Z&quot;,&quot;2020-02-13T00:00:00Z&quot;,&quot;2020-02-14T00:00:00Z&quot;,&quot;2020-02-15T00:00:00Z&quot;,&quot;2020-02-16T00:00:00Z&quot;,&quot;2020-02-17T00:00:00Z&quot;,&quot;2020-02-18T00:00:00Z&quot;,&quot;2020-02-19T00:00:00Z&quot;,&quot;2020-02-20T00:00:00Z&quot;,&quot;2020-02-21T00:00:00Z&quot;,&quot;2020-02-22T00:00:00Z&quot;,&quot;2020-02-23T00:00:00Z&quot;,&quot;2020-02-24T00:00:00Z&quot;,&quot;2020-02-25T00:00:00Z&quot;,&quot;2020-02-26T00:00:00Z&quot;,&quot;2020-02-27T00:00:00Z&quot;,&quot;2020-02-28T00:00:00Z&quot;,&quot;2020-02-29T00:00:00Z&quot;,&quot;2020-03-01T00:00:00Z&quot;,&quot;2020-03-02T00:00:00Z&quot;,&quot;2020-03-03T00:00:00Z&quot;,&quot;2020-03-04T00:00:00Z&quot;,&quot;2020-03-05T00:00:00Z&quot;,&quot;2020-03-06T00:00:00Z&quot;,&quot;2020-03-07T00:00:00Z&quot;,&quot;2020-03-08T00:00:00Z&quot;,&quot;2020-03-09T00:00:00Z&quot;,&quot;2020-03-10T00:00:00Z&quot;,&quot;2020-03-11T00:00:00Z&quot;,&quot;2020-03-12T00:00:00Z&quot;,&quot;2020-03-13T00:00:00Z&quot;,&quot;2020-03-14T00:00:00Z&quot;,&quot;2020-03-15T00:00:00Z&quot;,&quot;2020-03-16T00:00:00Z&quot;,&quot;2020-03-17T00:00:00Z&quot;,&quot;2020-03-18T00:00:00Z&quot;,&quot;2020-03-19T00:00:00Z&quot;,&quot;2020-03-20T00:00:00Z&quot;,&quot;2020-03-21T00:00:00Z&quot;,&quot;2020-03-22T00:00:00Z&quot;,&quot;2020-03-23T00:00:00Z&quot;,&quot;2020-03-24T00:00:00Z&quot;,&quot;2020-03-25T00:00:00Z&quot;,&quot;2020-03-26T00:00:00Z&quot;,&quot;2020-03-27T00:00:00Z&quot;,&quot;2020-03-28T00:00:00Z&quot;,&quot;2020-03-29T00:00:00Z&quot;,&quot;2020-03-30T00:00:00Z&quot;,&quot;2020-03-31T00:00:00Z&quot;,&quot;2020-04-01T00:00:00Z&quot;,&quot;2020-04-02T00:00:00Z&quot;,&quot;2020-04-03T00:00:00Z&quot;,&quot;2020-04-04T00:00:00Z&quot;,&quot;2020-04-05T00:00:00Z&quot;,&quot;2020-04-06T00:00:00Z&quot;,&quot;2020-04-07T00:00:00Z&quot;,&quot;2020-04-08T00:00:00Z&quot;,&quot;2020-04-09T00:00:00Z&quot;,&quot;2020-04-10T00:00:00Z&quot;,&quot;2020-04-11T00:00:00Z&quot;,&quot;2020-04-12T00:00:00Z&quot;,&quot;2020-04-13T00:00:00Z&quot;,&quot;2020-04-14T00:00:00Z&quot;,&quot;2020-04-15T00:00:00Z&quot;,&quot;2020-04-16T00:00:00Z&quot;,&quot;2020-04-17T00:00:00Z&quot;,&quot;2020-04-18T00:00:00Z&quot;,&quot;2020-04-19T00:00:00Z&quot;,&quot;2020-04-20T00:00:00Z&quot;,&quot;2020-04-21T00:00:00Z&quot;,&quot;2020-04-22T00:00:00Z&quot;,&quot;2020-04-23T00:00:00Z&quot;,&quot;2020-04-24T00:00:00Z&quot;,&quot;2020-04-25T00:00:00Z&quot;,&quot;2020-04-26T00:00:00Z&quot;,&quot;2020-04-27T00:00:00Z&quot;,&quot;2020-04-28T00:00:00Z&quot;,&quot;2020-04-29T00:00:00Z&quot;,&quot;2020-04-30T00:00:00Z&quot;,&quot;2020-05-01T00:00:00Z&quot;,&quot;2020-05-02T00:00:00Z&quot;,&quot;2020-05-03T00:00:00Z&quot;,&quot;2020-05-04T00:00:00Z&quot;,&quot;2020-05-05T00:00:00Z&quot;,&quot;2020-05-06T00:00:00Z&quot;,&quot;2020-05-07T00:00:00Z&quot;,&quot;2020-05-08T00:00:00Z&quot;,&quot;2020-05-09T00:00:00Z&quot;,&quot;2020-05-10T00:00:00Z&quot;,&quot;2020-05-11T00:00:00Z&quot;,&quot;2020-05-12T00:00:00Z&quot;,&quot;2020-05-13T00:00:00Z&quot;,&quot;2020-05-14T00:00:00Z&quot;,&quot;2020-05-15T00:00:00Z&quot;,&quot;2020-05-16T00:00:00Z&quot;,&quot;2020-05-17T00:00:00Z&quot;,&quot;2020-05-18T00:00:00Z&quot;,&quot;2020-05-19T00:00:00Z&quot;,&quot;2020-05-20T00:00:00Z&quot;,&quot;2020-05-21T00:00:00Z&quot;,&quot;2020-05-22T00:00:00Z&quot;,&quot;2020-05-23T00:00:00Z&quot;,&quot;2020-05-24T00:00:00Z&quot;,&quot;2020-05-25T00:00:00Z&quot;,&quot;2020-05-26T00:00:00Z&quot;,&quot;2020-05-27T00:00:00Z&quot;,&quot;2020-05-28T00:00:00Z&quot;,&quot;2020-05-29T00:00:00Z&quot;,&quot;2020-05-30T00:00:00Z&quot;,&quot;2020-05-31T00:00:00Z&quot;,&quot;2020-06-01T00:00:00Z&quot;,&quot;2020-06-02T00:00:00Z&quot;,&quot;2020-06-03T00:00:00Z&quot;,&quot;2020-06-04T00:00:00Z&quot;,&quot;2020-06-05T00:00:00Z&quot;,&quot;2020-06-06T00:00:00Z&quot;,&quot;2020-06-07T00:00:00Z&quot;,&quot;2020-06-08T00:00:00Z&quot;,&quot;2020-06-09T00:00:00Z&quot;,&quot;2020-06-10T00:00:00Z&quot;,&quot;2020-06-11T00:00:00Z&quot;,&quot;2020-06-12T00:00:00Z&quot;,&quot;2020-06-13T00:00:00Z&quot;,&quot;2020-06-14T00:00:00Z&quot;,&quot;2020-06-15T00:00:00Z&quot;,&quot;2020-06-16T00:00:00Z&quot;,&quot;2020-06-17T00:00:00Z&quot;,&quot;2020-06-18T00:00:00Z&quot;,&quot;2020-06-19T00:00:00Z&quot;,&quot;2020-06-20T00:00:00Z&quot;,&quot;2020-06-21T00:00:00Z&quot;,&quot;2020-06-22T00:00:00Z&quot;,&quot;2020-06-23T00:00:00Z&quot;,&quot;2020-06-24T00:00:00Z&quot;,&quot;2020-06-25T00:00:00Z&quot;,&quot;2020-06-26T00:00:00Z&quot;,&quot;2020-06-27T00:00:00Z&quot;,&quot;2020-06-28T00:00:00Z&quot;,&quot;2020-06-29T00:00:00Z&quot;,&quot;2020-06-30T00:00:00Z&quot;,&quot;2020-07-01T00:00:00Z&quot;,&quot;2020-07-02T00:00:00Z&quot;,&quot;2020-07-03T00:00:00Z&quot;,&quot;2020-07-04T00:00:00Z&quot;,&quot;2020-07-05T00:00:00Z&quot;,&quot;2020-07-06T00:00:00Z&quot;,&quot;2020-07-07T00:00:00Z&quot;,&quot;2020-07-08T00:00:00Z&quot;,&quot;2020-07-09T00:00:00Z&quot;,&quot;2020-07-10T00:00:00Z&quot;,&quot;2020-07-11T00:00:00Z&quot;,&quot;2020-07-12T00:00:00Z&quot;,&quot;2020-07-13T00:00:00Z&quot;,&quot;2020-07-14T00:00:00Z&quot;,&quot;2020-07-15T00:00:00Z&quot;,&quot;2020-07-16T00:00:00Z&quot;,&quot;2020-07-17T00:00:00Z&quot;,&quot;2020-07-18T00:00:00Z&quot;,&quot;2020-07-19T00:00:00Z&quot;,&quot;2020-07-20T00:00:00Z&quot;,&quot;2020-07-21T00:00:00Z&quot;,&quot;2020-07-22T00:00:00Z&quot;,&quot;2020-07-23T00:00:00Z&quot;,&quot;2020-07-24T00:00:00Z&quot;,&quot;2020-07-25T00:00:00Z&quot;,&quot;2020-07-26T00:00:00Z&quot;,&quot;2020-07-27T00:00:00Z&quot;,&quot;2020-07-28T00:00:00Z&quot;,&quot;2020-07-29T00:00:00Z&quot;,&quot;2020-07-30T00:00:00Z&quot;,&quot;2020-07-31T00:00:00Z&quot;,&quot;2020-08-01T00:00:00Z&quot;,&quot;2020-08-02T00:00:00Z&quot;,&quot;2020-08-03T00:00:00Z&quot;,&quot;2020-08-04T00:00:00Z&quot;,&quot;2020-08-05T00:00:00Z&quot;,&quot;2020-08-06T00:00:00Z&quot;,&quot;2020-08-07T00:00:00Z&quot;,&quot;2020-08-08T00:00:00Z&quot;,&quot;2020-08-09T00:00:00Z&quot;,&quot;2020-08-10T00:00:00Z&quot;,&quot;2020-08-11T00:00:00Z&quot;,&quot;2020-08-12T00:00:00Z&quot;,&quot;2020-08-13T00:00:00Z&quot;,&quot;2020-08-14T00:00:00Z&quot;,&quot;2020-08-15T00:00:00Z&quot;,&quot;2020-08-16T00:00:00Z&quot;,&quot;2020-08-17T00:00:00Z&quot;,&quot;2020-08-18T00:00:00Z&quot;,&quot;2020-08-19T00:00:00Z&quot;,&quot;2020-08-20T00:00:00Z&quot;,&quot;2020-08-21T00:00:00Z&quot;,&quot;2020-08-22T00:00:00Z&quot;,&quot;2020-08-23T00:00:00Z&quot;,&quot;2020-08-24T00:00:00Z&quot;,&quot;2020-08-25T00:00:00Z&quot;,&quot;2020-08-26T00:00:00Z&quot;,&quot;2020-08-27T00:00:00Z&quot;,&quot;2020-08-28T00:00:00Z&quot;,&quot;2020-08-29T00:00:00Z&quot;,&quot;2020-08-30T00:00:00Z&quot;,&quot;2020-08-31T00:00:00Z&quot;,&quot;2020-09-01T00:00:00Z&quot;,&quot;2020-09-02T00:00:00Z&quot;,&quot;2020-09-03T00:00:00Z&quot;,&quot;2020-09-04T00:00:00Z&quot;,&quot;2020-09-05T00:00:00Z&quot;,&quot;2020-09-06T00:00:00Z&quot;,&quot;2020-09-07T00:00:00Z&quot;,&quot;2020-09-08T00:00:00Z&quot;,&quot;2020-09-09T00:00:00Z&quot;,&quot;2020-09-10T00:00:00Z&quot;,&quot;2020-09-11T00:00:00Z&quot;,&quot;2020-09-12T00:00:00Z&quot;,&quot;2020-09-13T00:00:00Z&quot;,&quot;2020-09-14T00:00:00Z&quot;,&quot;2020-09-15T00:00:00Z&quot;,&quot;2020-09-16T00:00:00Z&quot;,&quot;2020-09-17T00:00:00Z&quot;,&quot;2020-09-18T00:00:00Z&quot;,&quot;2020-09-19T00:00:00Z&quot;,&quot;2020-09-20T00:00:00Z&quot;,&quot;2020-09-21T00:00:00Z&quot;,&quot;2020-09-22T00:00:00Z&quot;,&quot;2020-09-23T00:00:00Z&quot;,&quot;2020-09-24T00:00:00Z&quot;,&quot;2020-09-25T00:00:00Z&quot;,&quot;2020-09-26T00:00:00Z&quot;,&quot;2020-09-27T00:00:00Z&quot;,&quot;2020-09-28T00:00:00Z&quot;,&quot;2020-09-29T00:00:00Z&quot;,&quot;2020-09-30T00:00:00Z&quot;,&quot;2020-10-01T00:00:00Z&quot;,&quot;2020-10-02T00:00:00Z&quot;,&quot;2020-10-03T00:00:00Z&quot;,&quot;2020-10-04T00:00:00Z&quot;,&quot;2020-10-05T00:00:00Z&quot;,&quot;2020-10-06T00:00:00Z&quot;,&quot;2020-10-07T00:00:00Z&quot;,&quot;2020-10-08T00:00:00Z&quot;,&quot;2020-10-09T00:00:00Z&quot;,&quot;2020-10-10T00:00:00Z&quot;,&quot;2020-10-11T00:00:00Z&quot;,&quot;2020-10-12T00:00:00Z&quot;,&quot;2020-10-13T00:00:00Z&quot;,&quot;2020-10-14T00:00:00Z&quot;,&quot;2020-10-15T00:00:00Z&quot;,&quot;2020-10-16T00:00:00Z&quot;,&quot;2020-10-17T00:00:00Z&quot;,&quot;2020-10-18T00:00:00Z&quot;,&quot;2020-10-19T00:00:00Z&quot;,&quot;2020-10-20T00:00:00Z&quot;,&quot;2020-10-21T00:00:00Z&quot;,&quot;2020-10-22T00:00:00Z&quot;,&quot;2020-10-23T00:00:00Z&quot;,&quot;2020-10-24T00:00:00Z&quot;,&quot;2020-10-25T00:00:00Z&quot;,&quot;2020-10-26T00:00:00Z&quot;,&quot;2020-10-27T00:00:00Z&quot;,&quot;2020-10-28T00:00:00Z&quot;,&quot;2020-10-29T00:00:00Z&quot;,&quot;2020-10-30T00:00:00Z&quot;,&quot;2020-10-31T00:00:00Z&quot;,&quot;2020-11-01T00:00:00Z&quot;,&quot;2020-11-02T00:00:00Z&quot;,&quot;2020-11-03T00:00:00Z&quot;,&quot;2020-11-04T00:00:00Z&quot;,&quot;2020-11-05T00:00:00Z&quot;,&quot;2020-11-06T00:00:00Z&quot;,&quot;2020-11-07T00:00:00Z&quot;,&quot;2020-11-08T00:00:00Z&quot;,&quot;2020-11-09T00:00:00Z&quot;,&quot;2020-11-10T00:00:00Z&quot;],null,null,null],&quot;colorModels&quot;:[]},&quot;fragmentFirstRowIndex&quot;:0,&quot;totalFilteredRows&quot;:0,&quot;totalRows&quot;:0,&quot;dataHash&quot;:null},&quot;translator&quot;:{&quot;sourceID&quot;:null,&quot;targetIDs&quot;:null,&quot;mapping&quot;:{&quot;Row250&quot;:[&quot;Row0_137_251&quot;],&quot;Row130&quot;:[&quot;Row0_137_131&quot;],&quot;Row251&quot;:[&quot;Row0_137_252&quot;],&quot;Row131&quot;:[&quot;Row0_137_132&quot;],&quot;Row252&quot;:[&quot;Row0_137_253&quot;],&quot;Row132&quot;:[&quot;Row0_137_133&quot;],&quot;Row253&quot;:[&quot;Row0_137_254&quot;],&quot;Row133&quot;:[&quot;Row0_137_134&quot;],&quot;Row254&quot;:[&quot;Row0_137_255&quot;],&quot;Row134&quot;:[&quot;Row0_137_135&quot;],&quot;Row255&quot;:[&quot;Row0_137_256&quot;],&quot;Row135&quot;:[&quot;Row0_137_136&quot;],&quot;Row256&quot;:[&quot;Row0_137_257&quot;],&quot;Row136&quot;:[&quot;Row0_137_137&quot;],&quot;Row257&quot;:[&quot;Row0_137_258&quot;],&quot;Row137&quot;:[&quot;Row0_137_138&quot;],&quot;Row258&quot;:[&quot;Row0_137_259&quot;],&quot;Row138&quot;:[&quot;Row0_137_139&quot;],&quot;Row259&quot;:[&quot;Row0_137_260&quot;],&quot;Row139&quot;:[&quot;Row0_137_140&quot;],&quot;Row260&quot;:[&quot;Row0_137_261&quot;],&quot;Row140&quot;:[&quot;Row0_137_141&quot;],&quot;Row261&quot;:[&quot;Row0_137_262&quot;],&quot;Row141&quot;:[&quot;Row0_137_142&quot;],&quot;Row262&quot;:[&quot;Row0_137_263&quot;],&quot;Row142&quot;:[&quot;Row0_137_143&quot;],&quot;Row263&quot;:[&quot;Row0_137_264&quot;],&quot;Row143&quot;:[&quot;Row0_137_144&quot;],&quot;Row264&quot;:[&quot;Row0_137_265&quot;],&quot;Row144&quot;:[&quot;Row0_137_145&quot;],&quot;Row265&quot;:[&quot;Row0_137_266&quot;],&quot;Row145&quot;:[&quot;Row0_137_146&quot;],&quot;Row266&quot;:[&quot;Row0_137_267&quot;],&quot;Row146&quot;:[&quot;Row0_137_147&quot;],&quot;Row267&quot;:[&quot;Row0_137_268&quot;],&quot;Row147&quot;:[&quot;Row0_137_148&quot;],&quot;Row268&quot;:[&quot;Row0_137_269&quot;],&quot;Row148&quot;:[&quot;Row0_137_149&quot;],&quot;Row269&quot;:[&quot;Row0_137_270&quot;],&quot;Row149&quot;:[&quot;Row0_137_150&quot;],&quot;Row109&quot;:[&quot;Row0_137_110&quot;],&quot;Row230&quot;:[&quot;Row0_137_231&quot;],&quot;Row110&quot;:[&quot;Row0_137_111&quot;],&quot;Row231&quot;:[&quot;Row0_137_232&quot;],&quot;Row111&quot;:[&quot;Row0_137_112&quot;],&quot;Row232&quot;:[&quot;Row0_137_233&quot;],&quot;Row112&quot;:[&quot;Row0_137_113&quot;],&quot;Row233&quot;:[&quot;Row0_137_234&quot;],&quot;Row113&quot;:[&quot;Row0_137_114&quot;],&quot;Row234&quot;:[&quot;Row0_137_235&quot;],&quot;Row114&quot;:[&quot;Row0_137_115&quot;],&quot;Row235&quot;:[&quot;Row0_137_236&quot;],&quot;Row115&quot;:[&quot;Row0_137_116&quot;],&quot;Row236&quot;:[&quot;Row0_137_237&quot;],&quot;Row116&quot;:[&quot;Row0_137_117&quot;],&quot;Row237&quot;:[&quot;Row0_137_238&quot;],&quot;Row117&quot;:[&quot;Row0_137_118&quot;],&quot;Row238&quot;:[&quot;Row0_137_239&quot;],&quot;Row118&quot;:[&quot;Row0_137_119&quot;],&quot;Row239&quot;:[&quot;Row0_137_240&quot;],&quot;Row119&quot;:[&quot;Row0_137_120&quot;],&quot;Row240&quot;:[&quot;Row0_137_241&quot;],&quot;Row120&quot;:[&quot;Row0_137_121&quot;],&quot;Row241&quot;:[&quot;Row0_137_242&quot;],&quot;Row121&quot;:[&quot;Row0_137_122&quot;],&quot;Row242&quot;:[&quot;Row0_137_243&quot;],&quot;Row122&quot;:[&quot;Row0_137_123&quot;],&quot;Row243&quot;:[&quot;Row0_137_244&quot;],&quot;Row123&quot;:[&quot;Row0_137_124&quot;],&quot;Row244&quot;:[&quot;Row0_137_245&quot;],&quot;Row124&quot;:[&quot;Row0_137_125&quot;],&quot;Row245&quot;:[&quot;Row0_137_246&quot;],&quot;Row125&quot;:[&quot;Row0_137_126&quot;],&quot;Row246&quot;:[&quot;Row0_137_247&quot;],&quot;Row126&quot;:[&quot;Row0_137_127&quot;],&quot;Row247&quot;:[&quot;Row0_137_248&quot;],&quot;Row127&quot;:[&quot;Row0_137_128&quot;],&quot;Row248&quot;:[&quot;Row0_137_249&quot;],&quot;Row128&quot;:[&quot;Row0_137_129&quot;],&quot;Row249&quot;:[&quot;Row0_137_250&quot;],&quot;Row129&quot;:[&quot;Row0_137_130&quot;],&quot;Row85&quot;:[&quot;Row0_137_86&quot;],&quot;Row84&quot;:[&quot;Row0_137_85&quot;],&quot;Row83&quot;:[&quot;Row0_137_84&quot;],&quot;Row82&quot;:[&quot;Row0_137_83&quot;],&quot;Row81&quot;:[&quot;Row0_137_82&quot;],&quot;Row80&quot;:[&quot;Row0_137_81&quot;],&quot;Row89&quot;:[&quot;Row0_137_90&quot;],&quot;Row88&quot;:[&quot;Row0_137_89&quot;],&quot;Row87&quot;:[&quot;Row0_137_88&quot;],&quot;Row86&quot;:[&quot;Row0_137_87&quot;],&quot;Row290&quot;:[&quot;Row0_137_291&quot;],&quot;Row170&quot;:[&quot;Row0_137_171&quot;],&quot;Row291&quot;:[&quot;Row0_137_292&quot;],&quot;Row171&quot;:[&quot;Row0_137_172&quot;],&quot;Row292&quot;:[&quot;Row0_137_293&quot;],&quot;Row172&quot;:[&quot;Row0_137_173&quot;],&quot;Row293&quot;:[&quot;Row0_137_294&quot;],&quot;Row173&quot;:[&quot;Row0_137_174&quot;],&quot;Row174&quot;:[&quot;Row0_137_175&quot;],&quot;Row175&quot;:[&quot;Row0_137_176&quot;],&quot;Row176&quot;:[&quot;Row0_137_177&quot;],&quot;Row177&quot;:[&quot;Row0_137_178&quot;],&quot;Row178&quot;:[&quot;Row0_137_179&quot;],&quot;Row179&quot;:[&quot;Row0_137_180&quot;],&quot;Row74&quot;:[&quot;Row0_137_75&quot;],&quot;Row73&quot;:[&quot;Row0_137_74&quot;],&quot;Row72&quot;:[&quot;Row0_137_73&quot;],&quot;Row71&quot;:[&quot;Row0_137_72&quot;],&quot;Row70&quot;:[&quot;Row0_137_71&quot;],&quot;Row79&quot;:[&quot;Row0_137_80&quot;],&quot;Row78&quot;:[&quot;Row0_137_79&quot;],&quot;Row77&quot;:[&quot;Row0_137_78&quot;],&quot;Row76&quot;:[&quot;Row0_137_77&quot;],&quot;Row75&quot;:[&quot;Row0_137_76&quot;],&quot;Row180&quot;:[&quot;Row0_137_181&quot;],&quot;Row181&quot;:[&quot;Row0_137_182&quot;],&quot;Row182&quot;:[&quot;Row0_137_183&quot;],&quot;Row183&quot;:[&quot;Row0_137_184&quot;],&quot;Row184&quot;:[&quot;Row0_137_185&quot;],&quot;Row185&quot;:[&quot;Row0_137_186&quot;],&quot;Row186&quot;:[&quot;Row0_137_187&quot;],&quot;Row187&quot;:[&quot;Row0_137_188&quot;],&quot;Row188&quot;:[&quot;Row0_137_189&quot;],&quot;Row189&quot;:[&quot;Row0_137_190&quot;],&quot;Row270&quot;:[&quot;Row0_137_271&quot;],&quot;Row150&quot;:[&quot;Row0_137_151&quot;],&quot;Row271&quot;:[&quot;Row0_137_272&quot;],&quot;Row151&quot;:[&quot;Row0_137_152&quot;],&quot;Row272&quot;:[&quot;Row0_137_273&quot;],&quot;Row152&quot;:[&quot;Row0_137_153&quot;],&quot;Row273&quot;:[&quot;Row0_137_274&quot;],&quot;Row153&quot;:[&quot;Row0_137_154&quot;],&quot;Row274&quot;:[&quot;Row0_137_275&quot;],&quot;Row154&quot;:[&quot;Row0_137_155&quot;],&quot;Row275&quot;:[&quot;Row0_137_276&quot;],&quot;Row155&quot;:[&quot;Row0_137_156&quot;],&quot;Row276&quot;:[&quot;Row0_137_277&quot;],&quot;Row156&quot;:[&quot;Row0_137_157&quot;],&quot;Row277&quot;:[&quot;Row0_137_278&quot;],&quot;Row157&quot;:[&quot;Row0_137_158&quot;],&quot;Row278&quot;:[&quot;Row0_137_279&quot;],&quot;Row158&quot;:[&quot;Row0_137_159&quot;],&quot;Row279&quot;:[&quot;Row0_137_280&quot;],&quot;Row159&quot;:[&quot;Row0_137_160&quot;],&quot;Row96&quot;:[&quot;Row0_137_97&quot;],&quot;Row95&quot;:[&quot;Row0_137_96&quot;],&quot;Row94&quot;:[&quot;Row0_137_95&quot;],&quot;Row93&quot;:[&quot;Row0_137_94&quot;],&quot;Row92&quot;:[&quot;Row0_137_93&quot;],&quot;Row91&quot;:[&quot;Row0_137_92&quot;],&quot;Row90&quot;:[&quot;Row0_137_91&quot;],&quot;Row99&quot;:[&quot;Row0_137_100&quot;],&quot;Row98&quot;:[&quot;Row0_137_99&quot;],&quot;Row97&quot;:[&quot;Row0_137_98&quot;],&quot;Row280&quot;:[&quot;Row0_137_281&quot;],&quot;Row160&quot;:[&quot;Row0_137_161&quot;],&quot;Row281&quot;:[&quot;Row0_137_282&quot;],&quot;Row161&quot;:[&quot;Row0_137_162&quot;],&quot;Row282&quot;:[&quot;Row0_137_283&quot;],&quot;Row162&quot;:[&quot;Row0_137_163&quot;],&quot;Row283&quot;:[&quot;Row0_137_284&quot;],&quot;Row163&quot;:[&quot;Row0_137_164&quot;],&quot;Row284&quot;:[&quot;Row0_137_285&quot;],&quot;Row164&quot;:[&quot;Row0_137_165&quot;],&quot;Row285&quot;:[&quot;Row0_137_286&quot;],&quot;Row165&quot;:[&quot;Row0_137_166&quot;],&quot;Row286&quot;:[&quot;Row0_137_287&quot;],&quot;Row166&quot;:[&quot;Row0_137_167&quot;],&quot;Row287&quot;:[&quot;Row0_137_288&quot;],&quot;Row167&quot;:[&quot;Row0_137_168&quot;],&quot;Row288&quot;:[&quot;Row0_137_289&quot;],&quot;Row168&quot;:[&quot;Row0_137_169&quot;],&quot;Row289&quot;:[&quot;Row0_137_290&quot;],&quot;Row169&quot;:[&quot;Row0_137_170&quot;],&quot;Row41&quot;:[&quot;Row0_137_42&quot;],&quot;Row40&quot;:[&quot;Row0_137_41&quot;],&quot;Row49&quot;:[&quot;Row0_137_50&quot;],&quot;Row48&quot;:[&quot;Row0_137_49&quot;],&quot;Row47&quot;:[&quot;Row0_137_48&quot;],&quot;Row46&quot;:[&quot;Row0_137_47&quot;],&quot;Row45&quot;:[&quot;Row0_137_46&quot;],&quot;Row44&quot;:[&quot;Row0_137_45&quot;],&quot;Row43&quot;:[&quot;Row0_137_44&quot;],&quot;Row42&quot;:[&quot;Row0_137_43&quot;],&quot;Row39&quot;:[&quot;Row0_137_40&quot;],&quot;Row30&quot;:[&quot;Row0_137_31&quot;],&quot;Row38&quot;:[&quot;Row0_137_39&quot;],&quot;Row37&quot;:[&quot;Row0_137_38&quot;],&quot;Row36&quot;:[&quot;Row0_137_37&quot;],&quot;Row35&quot;:[&quot;Row0_137_36&quot;],&quot;Row34&quot;:[&quot;Row0_137_35&quot;],&quot;Row33&quot;:[&quot;Row0_137_34&quot;],&quot;Row32&quot;:[&quot;Row0_137_33&quot;],&quot;Row31&quot;:[&quot;Row0_137_32&quot;],&quot;Row29&quot;:[&quot;Row0_137_30&quot;],&quot;Row28&quot;:[&quot;Row0_137_29&quot;],&quot;Row63&quot;:[&quot;Row0_137_64&quot;],&quot;Row62&quot;:[&quot;Row0_137_63&quot;],&quot;Row61&quot;:[&quot;Row0_137_62&quot;],&quot;Row60&quot;:[&quot;Row0_137_61&quot;],&quot;Row69&quot;:[&quot;Row0_137_70&quot;],&quot;Row68&quot;:[&quot;Row0_137_69&quot;],&quot;Row67&quot;:[&quot;Row0_137_68&quot;],&quot;Row66&quot;:[&quot;Row0_137_67&quot;],&quot;Row65&quot;:[&quot;Row0_137_66&quot;],&quot;Row190&quot;:[&quot;Row0_137_191&quot;],&quot;Row64&quot;:[&quot;Row0_137_65&quot;],&quot;Row191&quot;:[&quot;Row0_137_192&quot;],&quot;Row192&quot;:[&quot;Row0_137_193&quot;],&quot;Row193&quot;:[&quot;Row0_137_194&quot;],&quot;Row194&quot;:[&quot;Row0_137_195&quot;],&quot;Row195&quot;:[&quot;Row0_137_196&quot;],&quot;Row196&quot;:[&quot;Row0_137_197&quot;],&quot;Row197&quot;:[&quot;Row0_137_198&quot;],&quot;Row198&quot;:[&quot;Row0_137_199&quot;],&quot;Row199&quot;:[&quot;Row0_137_200&quot;],&quot;Row52&quot;:[&quot;Row0_137_53&quot;],&quot;Row51&quot;:[&quot;Row0_137_52&quot;],&quot;Row50&quot;:[&quot;Row0_137_51&quot;],&quot;Row59&quot;:[&quot;Row0_137_60&quot;],&quot;Row58&quot;:[&quot;Row0_137_59&quot;],&quot;Row57&quot;:[&quot;Row0_137_58&quot;],&quot;Row56&quot;:[&quot;Row0_137_57&quot;],&quot;Row55&quot;:[&quot;Row0_137_56&quot;],&quot;Row54&quot;:[&quot;Row0_137_55&quot;],&quot;Row53&quot;:[&quot;Row0_137_54&quot;],&quot;Row208&quot;:[&quot;Row0_137_209&quot;],&quot;Row209&quot;:[&quot;Row0_137_210&quot;],&quot;Row0&quot;:[&quot;Row0_137_1&quot;],&quot;Row1&quot;:[&quot;Row0_137_2&quot;],&quot;Row210&quot;:[&quot;Row0_137_211&quot;],&quot;Row8&quot;:[&quot;Row0_137_9&quot;],&quot;Row211&quot;:[&quot;Row0_137_212&quot;],&quot;Row9&quot;:[&quot;Row0_137_10&quot;],&quot;Row212&quot;:[&quot;Row0_137_213&quot;],&quot;Row6&quot;:[&quot;Row0_137_7&quot;],&quot;Row213&quot;:[&quot;Row0_137_214&quot;],&quot;Row7&quot;:[&quot;Row0_137_8&quot;],&quot;Row214&quot;:[&quot;Row0_137_215&quot;],&quot;Row4&quot;:[&quot;Row0_137_5&quot;],&quot;Row215&quot;:[&quot;Row0_137_216&quot;],&quot;Row5&quot;:[&quot;Row0_137_6&quot;],&quot;Row216&quot;:[&quot;Row0_137_217&quot;],&quot;Row2&quot;:[&quot;Row0_137_3&quot;],&quot;Row217&quot;:[&quot;Row0_137_218&quot;],&quot;Row3&quot;:[&quot;Row0_137_4&quot;],&quot;Row218&quot;:[&quot;Row0_137_219&quot;],&quot;Row219&quot;:[&quot;Row0_137_220&quot;],&quot;Row220&quot;:[&quot;Row0_137_221&quot;],&quot;Row100&quot;:[&quot;Row0_137_101&quot;],&quot;Row221&quot;:[&quot;Row0_137_222&quot;],&quot;Row101&quot;:[&quot;Row0_137_102&quot;],&quot;Row222&quot;:[&quot;Row0_137_223&quot;],&quot;Row102&quot;:[&quot;Row0_137_103&quot;],&quot;Row223&quot;:[&quot;Row0_137_224&quot;],&quot;Row103&quot;:[&quot;Row0_137_104&quot;],&quot;Row224&quot;:[&quot;Row0_137_225&quot;],&quot;Row104&quot;:[&quot;Row0_137_105&quot;],&quot;Row225&quot;:[&quot;Row0_137_226&quot;],&quot;Row105&quot;:[&quot;Row0_137_106&quot;],&quot;Row226&quot;:[&quot;Row0_137_227&quot;],&quot;Row106&quot;:[&quot;Row0_137_107&quot;],&quot;Row227&quot;:[&quot;Row0_137_228&quot;],&quot;Row107&quot;:[&quot;Row0_137_108&quot;],&quot;Row228&quot;:[&quot;Row0_137_229&quot;],&quot;Row108&quot;:[&quot;Row0_137_109&quot;],&quot;Row229&quot;:[&quot;Row0_137_230&quot;],&quot;Row27&quot;:[&quot;Row0_137_28&quot;],&quot;Row26&quot;:[&quot;Row0_137_27&quot;],&quot;Row25&quot;:[&quot;Row0_137_26&quot;],&quot;Row24&quot;:[&quot;Row0_137_25&quot;],&quot;Row23&quot;:[&quot;Row0_137_24&quot;],&quot;Row22&quot;:[&quot;Row0_137_23&quot;],&quot;Row21&quot;:[&quot;Row0_137_22&quot;],&quot;Row20&quot;:[&quot;Row0_137_21&quot;],&quot;Row19&quot;:[&quot;Row0_137_20&quot;],&quot;Row18&quot;:[&quot;Row0_137_19&quot;],&quot;Row17&quot;:[&quot;Row0_137_18&quot;],&quot;Row16&quot;:[&quot;Row0_137_17&quot;],&quot;Row15&quot;:[&quot;Row0_137_16&quot;],&quot;Row14&quot;:[&quot;Row0_137_15&quot;],&quot;Row13&quot;:[&quot;Row0_137_14&quot;],&quot;Row12&quot;:[&quot;Row0_137_13&quot;],&quot;Row11&quot;:[&quot;Row0_137_12&quot;],&quot;Row10&quot;:[&quot;Row0_137_11&quot;],&quot;Row200&quot;:[&quot;Row0_137_201&quot;],&quot;Row201&quot;:[&quot;Row0_137_202&quot;],&quot;Row202&quot;:[&quot;Row0_137_203&quot;],&quot;Row203&quot;:[&quot;Row0_137_204&quot;],&quot;Row204&quot;:[&quot;Row0_137_205&quot;],&quot;Row205&quot;:[&quot;Row0_137_206&quot;],&quot;Row206&quot;:[&quot;Row0_137_207&quot;],&quot;Row207&quot;:[&quot;Row0_137_208&quot;]},&quot;forward&quot;:false},&quot;uuid&quot;:&quot;cddcf22d-8e86-4eaa-9260-09d849ae4140&quot;}"/>
</config>
<config key="inObject_1">
<entry key="jsonValue" type="xstring" isnull="true" value=""/>
</config>
</config>
<entry key="warnMessage" type="xstring" value=""/>
<entry key="errorMessage" type="xstring" value=""/>
</config>
